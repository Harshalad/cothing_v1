// source: update-chat-thread.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global = (function() {
  if (this) { return this; }
  if (typeof window !== 'undefined') { return window; }
  if (typeof global !== 'undefined') { return global; }
  if (typeof self !== 'undefined') { return self; }
  return Function('return this')();
}.call(null));

var common_common_pb = require('./common/common_pb.js');
goog.object.extend(proto, common_common_pb);
goog.exportSymbol('proto.ai.nworx.api.proto.user.userchats.CreateUserChatThread', null, global);
goog.exportSymbol('proto.ai.nworx.api.proto.user.userchats.DeleteUserChatThread', null, global);
goog.exportSymbol('proto.ai.nworx.api.proto.user.userchats.Participant', null, global);
goog.exportSymbol('proto.ai.nworx.api.proto.user.userchats.addChatRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ai.nworx.api.proto.user.userchats.CreateUserChatThread = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ai.nworx.api.proto.user.userchats.CreateUserChatThread.repeatedFields_, null);
};
goog.inherits(proto.ai.nworx.api.proto.user.userchats.CreateUserChatThread, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ai.nworx.api.proto.user.userchats.CreateUserChatThread.displayName = 'proto.ai.nworx.api.proto.user.userchats.CreateUserChatThread';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ai.nworx.api.proto.user.userchats.Participant = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ai.nworx.api.proto.user.userchats.Participant, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ai.nworx.api.proto.user.userchats.Participant.displayName = 'proto.ai.nworx.api.proto.user.userchats.Participant';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ai.nworx.api.proto.user.userchats.DeleteUserChatThread = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ai.nworx.api.proto.user.userchats.DeleteUserChatThread, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ai.nworx.api.proto.user.userchats.DeleteUserChatThread.displayName = 'proto.ai.nworx.api.proto.user.userchats.DeleteUserChatThread';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ai.nworx.api.proto.user.userchats.addChatRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ai.nworx.api.proto.user.userchats.addChatRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ai.nworx.api.proto.user.userchats.addChatRequest.displayName = 'proto.ai.nworx.api.proto.user.userchats.addChatRequest';
}

/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ai.nworx.api.proto.user.userchats.CreateUserChatThread.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ai.nworx.api.proto.user.userchats.CreateUserChatThread.prototype.toObject = function(opt_includeInstance) {
  return proto.ai.nworx.api.proto.user.userchats.CreateUserChatThread.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ai.nworx.api.proto.user.userchats.CreateUserChatThread} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ai.nworx.api.proto.user.userchats.CreateUserChatThread.toObject = function(includeInstance, msg) {
  var f, obj = {
    participantsList: jspb.Message.toObjectList(msg.getParticipantsList(),
    proto.ai.nworx.api.proto.user.userchats.Participant.toObject, includeInstance),
    organisationname: jspb.Message.getFieldWithDefault(msg, 2, ""),
    threadtype: jspb.Message.getFieldWithDefault(msg, 5, ""),
    serviceprovider: jspb.Message.getFieldWithDefault(msg, 6, ""),
    chatthreadid: jspb.Message.getFieldWithDefault(msg, 7, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ai.nworx.api.proto.user.userchats.CreateUserChatThread}
 */
proto.ai.nworx.api.proto.user.userchats.CreateUserChatThread.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ai.nworx.api.proto.user.userchats.CreateUserChatThread;
  return proto.ai.nworx.api.proto.user.userchats.CreateUserChatThread.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ai.nworx.api.proto.user.userchats.CreateUserChatThread} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ai.nworx.api.proto.user.userchats.CreateUserChatThread}
 */
proto.ai.nworx.api.proto.user.userchats.CreateUserChatThread.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ai.nworx.api.proto.user.userchats.Participant;
      reader.readMessage(value,proto.ai.nworx.api.proto.user.userchats.Participant.deserializeBinaryFromReader);
      msg.addParticipants(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrganisationname(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setThreadtype(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setServiceprovider(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setChatthreadid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ai.nworx.api.proto.user.userchats.CreateUserChatThread.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ai.nworx.api.proto.user.userchats.CreateUserChatThread.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ai.nworx.api.proto.user.userchats.CreateUserChatThread} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ai.nworx.api.proto.user.userchats.CreateUserChatThread.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParticipantsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ai.nworx.api.proto.user.userchats.Participant.serializeBinaryToWriter
    );
  }
  f = message.getOrganisationname();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getThreadtype();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getServiceprovider();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getChatthreadid();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
};


/**
 * repeated Participant participants = 1;
 * @return {!Array<!proto.ai.nworx.api.proto.user.userchats.Participant>}
 */
proto.ai.nworx.api.proto.user.userchats.CreateUserChatThread.prototype.getParticipantsList = function() {
  return /** @type{!Array<!proto.ai.nworx.api.proto.user.userchats.Participant>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ai.nworx.api.proto.user.userchats.Participant, 1));
};


/**
 * @param {!Array<!proto.ai.nworx.api.proto.user.userchats.Participant>} value
 * @return {!proto.ai.nworx.api.proto.user.userchats.CreateUserChatThread} returns this
*/
proto.ai.nworx.api.proto.user.userchats.CreateUserChatThread.prototype.setParticipantsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ai.nworx.api.proto.user.userchats.Participant=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ai.nworx.api.proto.user.userchats.Participant}
 */
proto.ai.nworx.api.proto.user.userchats.CreateUserChatThread.prototype.addParticipants = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ai.nworx.api.proto.user.userchats.Participant, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ai.nworx.api.proto.user.userchats.CreateUserChatThread} returns this
 */
proto.ai.nworx.api.proto.user.userchats.CreateUserChatThread.prototype.clearParticipantsList = function() {
  return this.setParticipantsList([]);
};


/**
 * optional string organisationName = 2;
 * @return {string}
 */
proto.ai.nworx.api.proto.user.userchats.CreateUserChatThread.prototype.getOrganisationname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.user.userchats.CreateUserChatThread} returns this
 */
proto.ai.nworx.api.proto.user.userchats.CreateUserChatThread.prototype.setOrganisationname = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string threadType = 5;
 * @return {string}
 */
proto.ai.nworx.api.proto.user.userchats.CreateUserChatThread.prototype.getThreadtype = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.user.userchats.CreateUserChatThread} returns this
 */
proto.ai.nworx.api.proto.user.userchats.CreateUserChatThread.prototype.setThreadtype = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string serviceProvider = 6;
 * @return {string}
 */
proto.ai.nworx.api.proto.user.userchats.CreateUserChatThread.prototype.getServiceprovider = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.user.userchats.CreateUserChatThread} returns this
 */
proto.ai.nworx.api.proto.user.userchats.CreateUserChatThread.prototype.setServiceprovider = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string chatThreadId = 7;
 * @return {string}
 */
proto.ai.nworx.api.proto.user.userchats.CreateUserChatThread.prototype.getChatthreadid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.user.userchats.CreateUserChatThread} returns this
 */
proto.ai.nworx.api.proto.user.userchats.CreateUserChatThread.prototype.setChatthreadid = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ai.nworx.api.proto.user.userchats.Participant.prototype.toObject = function(opt_includeInstance) {
  return proto.ai.nworx.api.proto.user.userchats.Participant.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ai.nworx.api.proto.user.userchats.Participant} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ai.nworx.api.proto.user.userchats.Participant.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    name: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ai.nworx.api.proto.user.userchats.Participant}
 */
proto.ai.nworx.api.proto.user.userchats.Participant.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ai.nworx.api.proto.user.userchats.Participant;
  return proto.ai.nworx.api.proto.user.userchats.Participant.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ai.nworx.api.proto.user.userchats.Participant} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ai.nworx.api.proto.user.userchats.Participant}
 */
proto.ai.nworx.api.proto.user.userchats.Participant.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ai.nworx.api.proto.user.userchats.Participant.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ai.nworx.api.proto.user.userchats.Participant.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ai.nworx.api.proto.user.userchats.Participant} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ai.nworx.api.proto.user.userchats.Participant.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getName();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ai.nworx.api.proto.user.userchats.Participant.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.user.userchats.Participant} returns this
 */
proto.ai.nworx.api.proto.user.userchats.Participant.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string name = 2;
 * @return {string}
 */
proto.ai.nworx.api.proto.user.userchats.Participant.prototype.getName = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.user.userchats.Participant} returns this
 */
proto.ai.nworx.api.proto.user.userchats.Participant.prototype.setName = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ai.nworx.api.proto.user.userchats.DeleteUserChatThread.prototype.toObject = function(opt_includeInstance) {
  return proto.ai.nworx.api.proto.user.userchats.DeleteUserChatThread.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ai.nworx.api.proto.user.userchats.DeleteUserChatThread} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ai.nworx.api.proto.user.userchats.DeleteUserChatThread.toObject = function(includeInstance, msg) {
  var f, obj = {
    chatthreadid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    chatmessageid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ai.nworx.api.proto.user.userchats.DeleteUserChatThread}
 */
proto.ai.nworx.api.proto.user.userchats.DeleteUserChatThread.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ai.nworx.api.proto.user.userchats.DeleteUserChatThread;
  return proto.ai.nworx.api.proto.user.userchats.DeleteUserChatThread.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ai.nworx.api.proto.user.userchats.DeleteUserChatThread} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ai.nworx.api.proto.user.userchats.DeleteUserChatThread}
 */
proto.ai.nworx.api.proto.user.userchats.DeleteUserChatThread.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setChatthreadid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setChatmessageid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ai.nworx.api.proto.user.userchats.DeleteUserChatThread.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ai.nworx.api.proto.user.userchats.DeleteUserChatThread.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ai.nworx.api.proto.user.userchats.DeleteUserChatThread} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ai.nworx.api.proto.user.userchats.DeleteUserChatThread.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getChatthreadid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getChatmessageid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string chatThreadId = 1;
 * @return {string}
 */
proto.ai.nworx.api.proto.user.userchats.DeleteUserChatThread.prototype.getChatthreadid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.user.userchats.DeleteUserChatThread} returns this
 */
proto.ai.nworx.api.proto.user.userchats.DeleteUserChatThread.prototype.setChatthreadid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string chatMessageId = 2;
 * @return {string}
 */
proto.ai.nworx.api.proto.user.userchats.DeleteUserChatThread.prototype.getChatmessageid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.user.userchats.DeleteUserChatThread} returns this
 */
proto.ai.nworx.api.proto.user.userchats.DeleteUserChatThread.prototype.setChatmessageid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ai.nworx.api.proto.user.userchats.addChatRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ai.nworx.api.proto.user.userchats.addChatRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ai.nworx.api.proto.user.userchats.addChatRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ai.nworx.api.proto.user.userchats.addChatRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    id: jspb.Message.getFieldWithDefault(msg, 1, ""),
    message: jspb.Message.getFieldWithDefault(msg, 2, ""),
    formattedmessage: jspb.Message.getFieldWithDefault(msg, 3, ""),
    repliedtochatmessage: jspb.Message.getFieldWithDefault(msg, 4, ""),
    repliedtochatid: jspb.Message.getFieldWithDefault(msg, 5, ""),
    status: jspb.Message.getFieldWithDefault(msg, 6, ""),
    messagefromuserid: jspb.Message.getFieldWithDefault(msg, 7, ""),
    messagefromusername: jspb.Message.getFieldWithDefault(msg, 8, ""),
    chatthreadid: jspb.Message.getFieldWithDefault(msg, 9, ""),
    messagetouserid: jspb.Message.getFieldWithDefault(msg, 10, ""),
    messagetousername: jspb.Message.getFieldWithDefault(msg, 11, ""),
    orgname: jspb.Message.getFieldWithDefault(msg, 12, ""),
    serviceprovider: jspb.Message.getFieldWithDefault(msg, 13, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ai.nworx.api.proto.user.userchats.addChatRequest}
 */
proto.ai.nworx.api.proto.user.userchats.addChatRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ai.nworx.api.proto.user.userchats.addChatRequest;
  return proto.ai.nworx.api.proto.user.userchats.addChatRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ai.nworx.api.proto.user.userchats.addChatRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ai.nworx.api.proto.user.userchats.addChatRequest}
 */
proto.ai.nworx.api.proto.user.userchats.addChatRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setFormattedmessage(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setRepliedtochatmessage(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setRepliedtochatid(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    case 7:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessagefromuserid(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessagefromusername(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setChatthreadid(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessagetouserid(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessagetousername(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setOrgname(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setServiceprovider(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ai.nworx.api.proto.user.userchats.addChatRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ai.nworx.api.proto.user.userchats.addChatRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ai.nworx.api.proto.user.userchats.addChatRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ai.nworx.api.proto.user.userchats.addChatRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getFormattedmessage();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getRepliedtochatmessage();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getRepliedtochatid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getMessagefromuserid();
  if (f.length > 0) {
    writer.writeString(
      7,
      f
    );
  }
  f = message.getMessagefromusername();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getChatthreadid();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getMessagetouserid();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getMessagetousername();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getOrgname();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getServiceprovider();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.ai.nworx.api.proto.user.userchats.addChatRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.user.userchats.addChatRequest} returns this
 */
proto.ai.nworx.api.proto.user.userchats.addChatRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string message = 2;
 * @return {string}
 */
proto.ai.nworx.api.proto.user.userchats.addChatRequest.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.user.userchats.addChatRequest} returns this
 */
proto.ai.nworx.api.proto.user.userchats.addChatRequest.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string formattedMessage = 3;
 * @return {string}
 */
proto.ai.nworx.api.proto.user.userchats.addChatRequest.prototype.getFormattedmessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.user.userchats.addChatRequest} returns this
 */
proto.ai.nworx.api.proto.user.userchats.addChatRequest.prototype.setFormattedmessage = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string repliedToChatMessage = 4;
 * @return {string}
 */
proto.ai.nworx.api.proto.user.userchats.addChatRequest.prototype.getRepliedtochatmessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.user.userchats.addChatRequest} returns this
 */
proto.ai.nworx.api.proto.user.userchats.addChatRequest.prototype.setRepliedtochatmessage = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string repliedToChatId = 5;
 * @return {string}
 */
proto.ai.nworx.api.proto.user.userchats.addChatRequest.prototype.getRepliedtochatid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.user.userchats.addChatRequest} returns this
 */
proto.ai.nworx.api.proto.user.userchats.addChatRequest.prototype.setRepliedtochatid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional string status = 6;
 * @return {string}
 */
proto.ai.nworx.api.proto.user.userchats.addChatRequest.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.user.userchats.addChatRequest} returns this
 */
proto.ai.nworx.api.proto.user.userchats.addChatRequest.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional string messageFromUserId = 7;
 * @return {string}
 */
proto.ai.nworx.api.proto.user.userchats.addChatRequest.prototype.getMessagefromuserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 7, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.user.userchats.addChatRequest} returns this
 */
proto.ai.nworx.api.proto.user.userchats.addChatRequest.prototype.setMessagefromuserid = function(value) {
  return jspb.Message.setProto3StringField(this, 7, value);
};


/**
 * optional string messageFromUserName = 8;
 * @return {string}
 */
proto.ai.nworx.api.proto.user.userchats.addChatRequest.prototype.getMessagefromusername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.user.userchats.addChatRequest} returns this
 */
proto.ai.nworx.api.proto.user.userchats.addChatRequest.prototype.setMessagefromusername = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string chatThreadId = 9;
 * @return {string}
 */
proto.ai.nworx.api.proto.user.userchats.addChatRequest.prototype.getChatthreadid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.user.userchats.addChatRequest} returns this
 */
proto.ai.nworx.api.proto.user.userchats.addChatRequest.prototype.setChatthreadid = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional string messageToUserId = 10;
 * @return {string}
 */
proto.ai.nworx.api.proto.user.userchats.addChatRequest.prototype.getMessagetouserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.user.userchats.addChatRequest} returns this
 */
proto.ai.nworx.api.proto.user.userchats.addChatRequest.prototype.setMessagetouserid = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string messageToUserName = 11;
 * @return {string}
 */
proto.ai.nworx.api.proto.user.userchats.addChatRequest.prototype.getMessagetousername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.user.userchats.addChatRequest} returns this
 */
proto.ai.nworx.api.proto.user.userchats.addChatRequest.prototype.setMessagetousername = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string orgName = 12;
 * @return {string}
 */
proto.ai.nworx.api.proto.user.userchats.addChatRequest.prototype.getOrgname = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.user.userchats.addChatRequest} returns this
 */
proto.ai.nworx.api.proto.user.userchats.addChatRequest.prototype.setOrgname = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string serviceProvider = 13;
 * @return {string}
 */
proto.ai.nworx.api.proto.user.userchats.addChatRequest.prototype.getServiceprovider = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.user.userchats.addChatRequest} returns this
 */
proto.ai.nworx.api.proto.user.userchats.addChatRequest.prototype.setServiceprovider = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};


goog.object.extend(exports, proto.ai.nworx.api.proto.user.userchats);
