/**
 * @fileoverview gRPC-Web generated client stub for ai.nworx.api.proto.userprogram
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.1
// 	protoc              v3.19.4
// source: fetch-user-program.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var common_common_pb = require('./common/common_pb.js')
const proto = {};
proto.ai = {};
proto.ai.nworx = {};
proto.ai.nworx.api = {};
proto.ai.nworx.api.proto = {};
proto.ai.nworx.api.proto.userprogram = require('./fetch-user-program_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.ai.nworx.api.proto.userprogram.FetchUserProgramServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.ai.nworx.api.proto.userprogram.FetchUserProgramServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest,
 *   !proto.ai.nworx.api.proto.common.ResponseProto>}
 */
const methodDescriptor_FetchUserProgramService_fetchUserGoals = new grpc.web.MethodDescriptor(
  '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchUserGoals',
  grpc.web.MethodType.UNARY,
  proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest,
  common_common_pb.ResponseProto,
  /**
   * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_common_pb.ResponseProto.deserializeBinary
);


/**
 * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ai.nworx.api.proto.common.ResponseProto)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ai.nworx.api.proto.common.ResponseProto>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ai.nworx.api.proto.userprogram.FetchUserProgramServiceClient.prototype.fetchUserGoals =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchUserGoals',
      request,
      metadata || {},
      methodDescriptor_FetchUserProgramService_fetchUserGoals,
      callback);
};


/**
 * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ai.nworx.api.proto.common.ResponseProto>}
 *     Promise that resolves to the response
 */
proto.ai.nworx.api.proto.userprogram.FetchUserProgramServicePromiseClient.prototype.fetchUserGoals =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchUserGoals',
      request,
      metadata || {},
      methodDescriptor_FetchUserProgramService_fetchUserGoals);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest,
 *   !proto.ai.nworx.api.proto.common.ResponseProto>}
 */
const methodDescriptor_FetchUserProgramService_fetchUserGoalsStream = new grpc.web.MethodDescriptor(
  '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchUserGoalsStream',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest,
  common_common_pb.ResponseProto,
  /**
   * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_common_pb.ResponseProto.deserializeBinary
);


/**
 * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.ai.nworx.api.proto.common.ResponseProto>}
 *     The XHR Node Readable Stream
 */
proto.ai.nworx.api.proto.userprogram.FetchUserProgramServiceClient.prototype.fetchUserGoalsStream =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchUserGoalsStream',
      request,
      metadata || {},
      methodDescriptor_FetchUserProgramService_fetchUserGoalsStream);
};


/**
 * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.ai.nworx.api.proto.common.ResponseProto>}
 *     The XHR Node Readable Stream
 */
proto.ai.nworx.api.proto.userprogram.FetchUserProgramServicePromiseClient.prototype.fetchUserGoalsStream =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchUserGoalsStream',
      request,
      metadata || {},
      methodDescriptor_FetchUserProgramService_fetchUserGoalsStream);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest,
 *   !proto.ai.nworx.api.proto.common.ResponseProto>}
 */
const methodDescriptor_FetchUserProgramService_fetchUserProgram = new grpc.web.MethodDescriptor(
  '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchUserProgram',
  grpc.web.MethodType.UNARY,
  proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest,
  common_common_pb.ResponseProto,
  /**
   * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_common_pb.ResponseProto.deserializeBinary
);


/**
 * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ai.nworx.api.proto.common.ResponseProto)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ai.nworx.api.proto.common.ResponseProto>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ai.nworx.api.proto.userprogram.FetchUserProgramServiceClient.prototype.fetchUserProgram =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchUserProgram',
      request,
      metadata || {},
      methodDescriptor_FetchUserProgramService_fetchUserProgram,
      callback);
};


/**
 * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ai.nworx.api.proto.common.ResponseProto>}
 *     Promise that resolves to the response
 */
proto.ai.nworx.api.proto.userprogram.FetchUserProgramServicePromiseClient.prototype.fetchUserProgram =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchUserProgram',
      request,
      metadata || {},
      methodDescriptor_FetchUserProgramService_fetchUserProgram);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest,
 *   !proto.ai.nworx.api.proto.common.ResponseProto>}
 */
const methodDescriptor_FetchUserProgramService_fetchCustomGoals = new grpc.web.MethodDescriptor(
  '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchCustomGoals',
  grpc.web.MethodType.UNARY,
  proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest,
  common_common_pb.ResponseProto,
  /**
   * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_common_pb.ResponseProto.deserializeBinary
);


/**
 * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ai.nworx.api.proto.common.ResponseProto)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ai.nworx.api.proto.common.ResponseProto>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ai.nworx.api.proto.userprogram.FetchUserProgramServiceClient.prototype.fetchCustomGoals =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchCustomGoals',
      request,
      metadata || {},
      methodDescriptor_FetchUserProgramService_fetchCustomGoals,
      callback);
};


/**
 * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ai.nworx.api.proto.common.ResponseProto>}
 *     Promise that resolves to the response
 */
proto.ai.nworx.api.proto.userprogram.FetchUserProgramServicePromiseClient.prototype.fetchCustomGoals =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchCustomGoals',
      request,
      metadata || {},
      methodDescriptor_FetchUserProgramService_fetchCustomGoals);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest,
 *   !proto.ai.nworx.api.proto.common.ResponseProto>}
 */
const methodDescriptor_FetchUserProgramService_fetchCurrentGoals = new grpc.web.MethodDescriptor(
  '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchCurrentGoals',
  grpc.web.MethodType.UNARY,
  proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest,
  common_common_pb.ResponseProto,
  /**
   * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_common_pb.ResponseProto.deserializeBinary
);


/**
 * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ai.nworx.api.proto.common.ResponseProto)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ai.nworx.api.proto.common.ResponseProto>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ai.nworx.api.proto.userprogram.FetchUserProgramServiceClient.prototype.fetchCurrentGoals =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchCurrentGoals',
      request,
      metadata || {},
      methodDescriptor_FetchUserProgramService_fetchCurrentGoals,
      callback);
};


/**
 * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ai.nworx.api.proto.common.ResponseProto>}
 *     Promise that resolves to the response
 */
proto.ai.nworx.api.proto.userprogram.FetchUserProgramServicePromiseClient.prototype.fetchCurrentGoals =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchCurrentGoals',
      request,
      metadata || {},
      methodDescriptor_FetchUserProgramService_fetchCurrentGoals);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest,
 *   !proto.ai.nworx.api.proto.common.ResponseProto>}
 */
const methodDescriptor_FetchUserProgramService_fetchInProgressGoals = new grpc.web.MethodDescriptor(
  '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchInProgressGoals',
  grpc.web.MethodType.UNARY,
  proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest,
  common_common_pb.ResponseProto,
  /**
   * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_common_pb.ResponseProto.deserializeBinary
);


/**
 * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ai.nworx.api.proto.common.ResponseProto)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ai.nworx.api.proto.common.ResponseProto>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ai.nworx.api.proto.userprogram.FetchUserProgramServiceClient.prototype.fetchInProgressGoals =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchInProgressGoals',
      request,
      metadata || {},
      methodDescriptor_FetchUserProgramService_fetchInProgressGoals,
      callback);
};


/**
 * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ai.nworx.api.proto.common.ResponseProto>}
 *     Promise that resolves to the response
 */
proto.ai.nworx.api.proto.userprogram.FetchUserProgramServicePromiseClient.prototype.fetchInProgressGoals =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchInProgressGoals',
      request,
      metadata || {},
      methodDescriptor_FetchUserProgramService_fetchInProgressGoals);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest,
 *   !proto.ai.nworx.api.proto.common.ResponseProto>}
 */
const methodDescriptor_FetchUserProgramService_fetchPreviousGoals = new grpc.web.MethodDescriptor(
  '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchPreviousGoals',
  grpc.web.MethodType.UNARY,
  proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest,
  common_common_pb.ResponseProto,
  /**
   * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_common_pb.ResponseProto.deserializeBinary
);


/**
 * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ai.nworx.api.proto.common.ResponseProto)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ai.nworx.api.proto.common.ResponseProto>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ai.nworx.api.proto.userprogram.FetchUserProgramServiceClient.prototype.fetchPreviousGoals =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchPreviousGoals',
      request,
      metadata || {},
      methodDescriptor_FetchUserProgramService_fetchPreviousGoals,
      callback);
};


/**
 * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ai.nworx.api.proto.common.ResponseProto>}
 *     Promise that resolves to the response
 */
proto.ai.nworx.api.proto.userprogram.FetchUserProgramServicePromiseClient.prototype.fetchPreviousGoals =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchPreviousGoals',
      request,
      metadata || {},
      methodDescriptor_FetchUserProgramService_fetchPreviousGoals);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest,
 *   !proto.ai.nworx.api.proto.common.ResponseProto>}
 */
const methodDescriptor_FetchUserProgramService_fetchSavedForLaterGoals = new grpc.web.MethodDescriptor(
  '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchSavedForLaterGoals',
  grpc.web.MethodType.UNARY,
  proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest,
  common_common_pb.ResponseProto,
  /**
   * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_common_pb.ResponseProto.deserializeBinary
);


/**
 * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ai.nworx.api.proto.common.ResponseProto)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ai.nworx.api.proto.common.ResponseProto>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ai.nworx.api.proto.userprogram.FetchUserProgramServiceClient.prototype.fetchSavedForLaterGoals =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchSavedForLaterGoals',
      request,
      metadata || {},
      methodDescriptor_FetchUserProgramService_fetchSavedForLaterGoals,
      callback);
};


/**
 * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ai.nworx.api.proto.common.ResponseProto>}
 *     Promise that resolves to the response
 */
proto.ai.nworx.api.proto.userprogram.FetchUserProgramServicePromiseClient.prototype.fetchSavedForLaterGoals =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchSavedForLaterGoals',
      request,
      metadata || {},
      methodDescriptor_FetchUserProgramService_fetchSavedForLaterGoals);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest,
 *   !proto.ai.nworx.api.proto.common.ResponseProto>}
 */
const methodDescriptor_FetchUserProgramService_fetchUserActivity = new grpc.web.MethodDescriptor(
  '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchUserActivity',
  grpc.web.MethodType.UNARY,
  proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest,
  common_common_pb.ResponseProto,
  /**
   * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_common_pb.ResponseProto.deserializeBinary
);


/**
 * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ai.nworx.api.proto.common.ResponseProto)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ai.nworx.api.proto.common.ResponseProto>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ai.nworx.api.proto.userprogram.FetchUserProgramServiceClient.prototype.fetchUserActivity =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchUserActivity',
      request,
      metadata || {},
      methodDescriptor_FetchUserProgramService_fetchUserActivity,
      callback);
};


/**
 * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ai.nworx.api.proto.common.ResponseProto>}
 *     Promise that resolves to the response
 */
proto.ai.nworx.api.proto.userprogram.FetchUserProgramServicePromiseClient.prototype.fetchUserActivity =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchUserActivity',
      request,
      metadata || {},
      methodDescriptor_FetchUserProgramService_fetchUserActivity);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest,
 *   !proto.ai.nworx.api.proto.common.ResponseProto>}
 */
const methodDescriptor_FetchUserProgramService_fetchUserAction = new grpc.web.MethodDescriptor(
  '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchUserAction',
  grpc.web.MethodType.UNARY,
  proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest,
  common_common_pb.ResponseProto,
  /**
   * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_common_pb.ResponseProto.deserializeBinary
);


/**
 * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ai.nworx.api.proto.common.ResponseProto)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ai.nworx.api.proto.common.ResponseProto>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ai.nworx.api.proto.userprogram.FetchUserProgramServiceClient.prototype.fetchUserAction =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchUserAction',
      request,
      metadata || {},
      methodDescriptor_FetchUserProgramService_fetchUserAction,
      callback);
};


/**
 * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ai.nworx.api.proto.common.ResponseProto>}
 *     Promise that resolves to the response
 */
proto.ai.nworx.api.proto.userprogram.FetchUserProgramServicePromiseClient.prototype.fetchUserAction =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchUserAction',
      request,
      metadata || {},
      methodDescriptor_FetchUserProgramService_fetchUserAction);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ai.nworx.api.proto.userprogram.FetchUserProgramGoalRequest,
 *   !proto.ai.nworx.api.proto.common.ResponseProto>}
 */
const methodDescriptor_FetchUserProgramService_fetchAnsweredQuestions = new grpc.web.MethodDescriptor(
  '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchAnsweredQuestions',
  grpc.web.MethodType.UNARY,
  proto.ai.nworx.api.proto.userprogram.FetchUserProgramGoalRequest,
  common_common_pb.ResponseProto,
  /**
   * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramGoalRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_common_pb.ResponseProto.deserializeBinary
);


/**
 * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramGoalRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ai.nworx.api.proto.common.ResponseProto)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ai.nworx.api.proto.common.ResponseProto>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ai.nworx.api.proto.userprogram.FetchUserProgramServiceClient.prototype.fetchAnsweredQuestions =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchAnsweredQuestions',
      request,
      metadata || {},
      methodDescriptor_FetchUserProgramService_fetchAnsweredQuestions,
      callback);
};


/**
 * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramGoalRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ai.nworx.api.proto.common.ResponseProto>}
 *     Promise that resolves to the response
 */
proto.ai.nworx.api.proto.userprogram.FetchUserProgramServicePromiseClient.prototype.fetchAnsweredQuestions =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchAnsweredQuestions',
      request,
      metadata || {},
      methodDescriptor_FetchUserProgramService_fetchAnsweredQuestions);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ai.nworx.api.proto.userprogram.FetchUserProgramGoalRequest,
 *   !proto.ai.nworx.api.proto.common.ResponseProto>}
 */
const methodDescriptor_FetchUserProgramService_fetchUserGoalById = new grpc.web.MethodDescriptor(
  '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchUserGoalById',
  grpc.web.MethodType.UNARY,
  proto.ai.nworx.api.proto.userprogram.FetchUserProgramGoalRequest,
  common_common_pb.ResponseProto,
  /**
   * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramGoalRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_common_pb.ResponseProto.deserializeBinary
);


/**
 * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramGoalRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ai.nworx.api.proto.common.ResponseProto)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ai.nworx.api.proto.common.ResponseProto>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ai.nworx.api.proto.userprogram.FetchUserProgramServiceClient.prototype.fetchUserGoalById =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchUserGoalById',
      request,
      metadata || {},
      methodDescriptor_FetchUserProgramService_fetchUserGoalById,
      callback);
};


/**
 * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramGoalRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ai.nworx.api.proto.common.ResponseProto>}
 *     Promise that resolves to the response
 */
proto.ai.nworx.api.proto.userprogram.FetchUserProgramServicePromiseClient.prototype.fetchUserGoalById =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchUserGoalById',
      request,
      metadata || {},
      methodDescriptor_FetchUserProgramService_fetchUserGoalById);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ai.nworx.api.proto.userprogram.FetchUserProgramGoalRequest,
 *   !proto.ai.nworx.api.proto.common.ResponseProto>}
 */
const methodDescriptor_FetchUserProgramService_fetchUserGoalMilestone = new grpc.web.MethodDescriptor(
  '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchUserGoalMilestone',
  grpc.web.MethodType.UNARY,
  proto.ai.nworx.api.proto.userprogram.FetchUserProgramGoalRequest,
  common_common_pb.ResponseProto,
  /**
   * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramGoalRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_common_pb.ResponseProto.deserializeBinary
);


/**
 * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramGoalRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ai.nworx.api.proto.common.ResponseProto)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ai.nworx.api.proto.common.ResponseProto>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ai.nworx.api.proto.userprogram.FetchUserProgramServiceClient.prototype.fetchUserGoalMilestone =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchUserGoalMilestone',
      request,
      metadata || {},
      methodDescriptor_FetchUserProgramService_fetchUserGoalMilestone,
      callback);
};


/**
 * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramGoalRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ai.nworx.api.proto.common.ResponseProto>}
 *     Promise that resolves to the response
 */
proto.ai.nworx.api.proto.userprogram.FetchUserProgramServicePromiseClient.prototype.fetchUserGoalMilestone =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchUserGoalMilestone',
      request,
      metadata || {},
      methodDescriptor_FetchUserProgramService_fetchUserGoalMilestone);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ai.nworx.api.proto.userprogram.FetchReporteeGoalsRequest,
 *   !proto.ai.nworx.api.proto.common.ResponseProto>}
 */
const methodDescriptor_FetchUserProgramService_fetchAllReporteeUserGoals = new grpc.web.MethodDescriptor(
  '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchAllReporteeUserGoals',
  grpc.web.MethodType.UNARY,
  proto.ai.nworx.api.proto.userprogram.FetchReporteeGoalsRequest,
  common_common_pb.ResponseProto,
  /**
   * @param {!proto.ai.nworx.api.proto.userprogram.FetchReporteeGoalsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_common_pb.ResponseProto.deserializeBinary
);


/**
 * @param {!proto.ai.nworx.api.proto.userprogram.FetchReporteeGoalsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ai.nworx.api.proto.common.ResponseProto)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ai.nworx.api.proto.common.ResponseProto>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ai.nworx.api.proto.userprogram.FetchUserProgramServiceClient.prototype.fetchAllReporteeUserGoals =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchAllReporteeUserGoals',
      request,
      metadata || {},
      methodDescriptor_FetchUserProgramService_fetchAllReporteeUserGoals,
      callback);
};


/**
 * @param {!proto.ai.nworx.api.proto.userprogram.FetchReporteeGoalsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ai.nworx.api.proto.common.ResponseProto>}
 *     Promise that resolves to the response
 */
proto.ai.nworx.api.proto.userprogram.FetchUserProgramServicePromiseClient.prototype.fetchAllReporteeUserGoals =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchAllReporteeUserGoals',
      request,
      metadata || {},
      methodDescriptor_FetchUserProgramService_fetchAllReporteeUserGoals);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ai.nworx.api.proto.userprogram.FetchReporteeGoalsRequest,
 *   !proto.ai.nworx.api.proto.common.ResponseProto>}
 */
const methodDescriptor_FetchUserProgramService_fetchTeamScore = new grpc.web.MethodDescriptor(
  '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchTeamScore',
  grpc.web.MethodType.UNARY,
  proto.ai.nworx.api.proto.userprogram.FetchReporteeGoalsRequest,
  common_common_pb.ResponseProto,
  /**
   * @param {!proto.ai.nworx.api.proto.userprogram.FetchReporteeGoalsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_common_pb.ResponseProto.deserializeBinary
);


/**
 * @param {!proto.ai.nworx.api.proto.userprogram.FetchReporteeGoalsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ai.nworx.api.proto.common.ResponseProto)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ai.nworx.api.proto.common.ResponseProto>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ai.nworx.api.proto.userprogram.FetchUserProgramServiceClient.prototype.fetchTeamScore =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchTeamScore',
      request,
      metadata || {},
      methodDescriptor_FetchUserProgramService_fetchTeamScore,
      callback);
};


/**
 * @param {!proto.ai.nworx.api.proto.userprogram.FetchReporteeGoalsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ai.nworx.api.proto.common.ResponseProto>}
 *     Promise that resolves to the response
 */
proto.ai.nworx.api.proto.userprogram.FetchUserProgramServicePromiseClient.prototype.fetchTeamScore =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchTeamScore',
      request,
      metadata || {},
      methodDescriptor_FetchUserProgramService_fetchTeamScore);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ai.nworx.api.proto.userprogram.FetchUserProgramGoalRequest,
 *   !proto.ai.nworx.api.proto.common.ResponseProto>}
 */
const methodDescriptor_FetchUserProgramService_fetchStreamAlignPosts = new grpc.web.MethodDescriptor(
  '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchStreamAlignPosts',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.ai.nworx.api.proto.userprogram.FetchUserProgramGoalRequest,
  common_common_pb.ResponseProto,
  /**
   * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramGoalRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_common_pb.ResponseProto.deserializeBinary
);


/**
 * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramGoalRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.ai.nworx.api.proto.common.ResponseProto>}
 *     The XHR Node Readable Stream
 */
proto.ai.nworx.api.proto.userprogram.FetchUserProgramServiceClient.prototype.fetchStreamAlignPosts =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchStreamAlignPosts',
      request,
      metadata || {},
      methodDescriptor_FetchUserProgramService_fetchStreamAlignPosts);
};


/**
 * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramGoalRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.ai.nworx.api.proto.common.ResponseProto>}
 *     The XHR Node Readable Stream
 */
proto.ai.nworx.api.proto.userprogram.FetchUserProgramServicePromiseClient.prototype.fetchStreamAlignPosts =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchStreamAlignPosts',
      request,
      metadata || {},
      methodDescriptor_FetchUserProgramService_fetchStreamAlignPosts);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ai.nworx.api.proto.userprogram.FetchUserProgramGoalRequest,
 *   !proto.ai.nworx.api.proto.common.ResponseProto>}
 */
const methodDescriptor_FetchUserProgramService_fetchStreamAchievePosts = new grpc.web.MethodDescriptor(
  '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchStreamAchievePosts',
  grpc.web.MethodType.SERVER_STREAMING,
  proto.ai.nworx.api.proto.userprogram.FetchUserProgramGoalRequest,
  common_common_pb.ResponseProto,
  /**
   * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramGoalRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_common_pb.ResponseProto.deserializeBinary
);


/**
 * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramGoalRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.ai.nworx.api.proto.common.ResponseProto>}
 *     The XHR Node Readable Stream
 */
proto.ai.nworx.api.proto.userprogram.FetchUserProgramServiceClient.prototype.fetchStreamAchievePosts =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchStreamAchievePosts',
      request,
      metadata || {},
      methodDescriptor_FetchUserProgramService_fetchStreamAchievePosts);
};


/**
 * @param {!proto.ai.nworx.api.proto.userprogram.FetchUserProgramGoalRequest} request The request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!grpc.web.ClientReadableStream<!proto.ai.nworx.api.proto.common.ResponseProto>}
 *     The XHR Node Readable Stream
 */
proto.ai.nworx.api.proto.userprogram.FetchUserProgramServicePromiseClient.prototype.fetchStreamAchievePosts =
    function(request, metadata) {
  return this.client_.serverStreaming(this.hostname_ +
      '/ai.nworx.api.proto.userprogram.FetchUserProgramService/fetchStreamAchievePosts',
      request,
      metadata || {},
      methodDescriptor_FetchUserProgramService_fetchStreamAchievePosts);
};


module.exports = proto.ai.nworx.api.proto.userprogram;

