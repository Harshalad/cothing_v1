// source: event.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

var common_common_pb = require('./common/common_pb.js');
goog.object.extend(proto, common_common_pb);
goog.exportSymbol('proto.ai.nworx.api.proto.event.AddSlotChunkOfAnchorForEventConfigRequest', null, global);
goog.exportSymbol('proto.ai.nworx.api.proto.event.BookSlotForEventRequest', null, global);
goog.exportSymbol('proto.ai.nworx.api.proto.event.CompleteUserMilestoneEventRequest', null, global);
goog.exportSymbol('proto.ai.nworx.api.proto.event.FetchAllEventConfigOfAnchorRequest', null, global);
goog.exportSymbol('proto.ai.nworx.api.proto.event.FetchAllEventConfigOfParticipantRequest', null, global);
goog.exportSymbol('proto.ai.nworx.api.proto.event.FetchEventConfigDetailsForAnchorRequest', null, global);
goog.exportSymbol('proto.ai.nworx.api.proto.event.FetchEventListRequest', null, global);
goog.exportSymbol('proto.ai.nworx.api.proto.event.FetchEventSlotsRequest', null, global);
goog.exportSymbol('proto.ai.nworx.api.proto.event.FetchUserEventIdRequest', null, global);
goog.exportSymbol('proto.ai.nworx.api.proto.event.FetchUserEventRequest', null, global);
goog.exportSymbol('proto.ai.nworx.api.proto.event.GoalDetail', null, global);
goog.exportSymbol('proto.ai.nworx.api.proto.event.SlotStatusRequest', null, global);
goog.exportSymbol('proto.ai.nworx.api.proto.event.UpdateSlotStatusOfAnchorRequest', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ai.nworx.api.proto.event.FetchAllEventConfigOfAnchorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ai.nworx.api.proto.event.FetchAllEventConfigOfAnchorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ai.nworx.api.proto.event.FetchAllEventConfigOfAnchorRequest.displayName = 'proto.ai.nworx.api.proto.event.FetchAllEventConfigOfAnchorRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ai.nworx.api.proto.event.FetchEventConfigDetailsForAnchorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ai.nworx.api.proto.event.FetchEventConfigDetailsForAnchorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ai.nworx.api.proto.event.FetchEventConfigDetailsForAnchorRequest.displayName = 'proto.ai.nworx.api.proto.event.FetchEventConfigDetailsForAnchorRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ai.nworx.api.proto.event.AddSlotChunkOfAnchorForEventConfigRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ai.nworx.api.proto.event.AddSlotChunkOfAnchorForEventConfigRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ai.nworx.api.proto.event.AddSlotChunkOfAnchorForEventConfigRequest.displayName = 'proto.ai.nworx.api.proto.event.AddSlotChunkOfAnchorForEventConfigRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ai.nworx.api.proto.event.UpdateSlotStatusOfAnchorRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ai.nworx.api.proto.event.UpdateSlotStatusOfAnchorRequest.repeatedFields_, null);
};
goog.inherits(proto.ai.nworx.api.proto.event.UpdateSlotStatusOfAnchorRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ai.nworx.api.proto.event.UpdateSlotStatusOfAnchorRequest.displayName = 'proto.ai.nworx.api.proto.event.UpdateSlotStatusOfAnchorRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ai.nworx.api.proto.event.SlotStatusRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ai.nworx.api.proto.event.SlotStatusRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ai.nworx.api.proto.event.SlotStatusRequest.displayName = 'proto.ai.nworx.api.proto.event.SlotStatusRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ai.nworx.api.proto.event.FetchAllEventConfigOfParticipantRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ai.nworx.api.proto.event.FetchAllEventConfigOfParticipantRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ai.nworx.api.proto.event.FetchAllEventConfigOfParticipantRequest.displayName = 'proto.ai.nworx.api.proto.event.FetchAllEventConfigOfParticipantRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ai.nworx.api.proto.event.FetchEventSlotsRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ai.nworx.api.proto.event.FetchEventSlotsRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ai.nworx.api.proto.event.FetchEventSlotsRequest.displayName = 'proto.ai.nworx.api.proto.event.FetchEventSlotsRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ai.nworx.api.proto.event.BookSlotForEventRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ai.nworx.api.proto.event.BookSlotForEventRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ai.nworx.api.proto.event.BookSlotForEventRequest.displayName = 'proto.ai.nworx.api.proto.event.BookSlotForEventRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ai.nworx.api.proto.event.GoalDetail = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ai.nworx.api.proto.event.GoalDetail, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ai.nworx.api.proto.event.GoalDetail.displayName = 'proto.ai.nworx.api.proto.event.GoalDetail';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ai.nworx.api.proto.event.FetchUserEventRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ai.nworx.api.proto.event.FetchUserEventRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ai.nworx.api.proto.event.FetchUserEventRequest.displayName = 'proto.ai.nworx.api.proto.event.FetchUserEventRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ai.nworx.api.proto.event.FetchEventListRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ai.nworx.api.proto.event.FetchEventListRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ai.nworx.api.proto.event.FetchEventListRequest.displayName = 'proto.ai.nworx.api.proto.event.FetchEventListRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ai.nworx.api.proto.event.FetchUserEventIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ai.nworx.api.proto.event.FetchUserEventIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ai.nworx.api.proto.event.FetchUserEventIdRequest.displayName = 'proto.ai.nworx.api.proto.event.FetchUserEventIdRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ai.nworx.api.proto.event.CompleteUserMilestoneEventRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ai.nworx.api.proto.event.CompleteUserMilestoneEventRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ai.nworx.api.proto.event.CompleteUserMilestoneEventRequest.displayName = 'proto.ai.nworx.api.proto.event.CompleteUserMilestoneEventRequest';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ai.nworx.api.proto.event.FetchAllEventConfigOfAnchorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ai.nworx.api.proto.event.FetchAllEventConfigOfAnchorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ai.nworx.api.proto.event.FetchAllEventConfigOfAnchorRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ai.nworx.api.proto.event.FetchAllEventConfigOfAnchorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    anchoruserid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    anchoruserrole: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ai.nworx.api.proto.event.FetchAllEventConfigOfAnchorRequest}
 */
proto.ai.nworx.api.proto.event.FetchAllEventConfigOfAnchorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ai.nworx.api.proto.event.FetchAllEventConfigOfAnchorRequest;
  return proto.ai.nworx.api.proto.event.FetchAllEventConfigOfAnchorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ai.nworx.api.proto.event.FetchAllEventConfigOfAnchorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ai.nworx.api.proto.event.FetchAllEventConfigOfAnchorRequest}
 */
proto.ai.nworx.api.proto.event.FetchAllEventConfigOfAnchorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setAnchoruserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAnchoruserrole(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ai.nworx.api.proto.event.FetchAllEventConfigOfAnchorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ai.nworx.api.proto.event.FetchAllEventConfigOfAnchorRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ai.nworx.api.proto.event.FetchAllEventConfigOfAnchorRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ai.nworx.api.proto.event.FetchAllEventConfigOfAnchorRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getAnchoruserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAnchoruserrole();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string anchorUserId = 1;
 * @return {string}
 */
proto.ai.nworx.api.proto.event.FetchAllEventConfigOfAnchorRequest.prototype.getAnchoruserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.event.FetchAllEventConfigOfAnchorRequest} returns this
 */
proto.ai.nworx.api.proto.event.FetchAllEventConfigOfAnchorRequest.prototype.setAnchoruserid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string anchorUserRole = 2;
 * @return {string}
 */
proto.ai.nworx.api.proto.event.FetchAllEventConfigOfAnchorRequest.prototype.getAnchoruserrole = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.event.FetchAllEventConfigOfAnchorRequest} returns this
 */
proto.ai.nworx.api.proto.event.FetchAllEventConfigOfAnchorRequest.prototype.setAnchoruserrole = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ai.nworx.api.proto.event.FetchEventConfigDetailsForAnchorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ai.nworx.api.proto.event.FetchEventConfigDetailsForAnchorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ai.nworx.api.proto.event.FetchEventConfigDetailsForAnchorRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ai.nworx.api.proto.event.FetchEventConfigDetailsForAnchorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventconfigid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    anchoruserid: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ai.nworx.api.proto.event.FetchEventConfigDetailsForAnchorRequest}
 */
proto.ai.nworx.api.proto.event.FetchEventConfigDetailsForAnchorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ai.nworx.api.proto.event.FetchEventConfigDetailsForAnchorRequest;
  return proto.ai.nworx.api.proto.event.FetchEventConfigDetailsForAnchorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ai.nworx.api.proto.event.FetchEventConfigDetailsForAnchorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ai.nworx.api.proto.event.FetchEventConfigDetailsForAnchorRequest}
 */
proto.ai.nworx.api.proto.event.FetchEventConfigDetailsForAnchorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventconfigid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAnchoruserid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ai.nworx.api.proto.event.FetchEventConfigDetailsForAnchorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ai.nworx.api.proto.event.FetchEventConfigDetailsForAnchorRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ai.nworx.api.proto.event.FetchEventConfigDetailsForAnchorRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ai.nworx.api.proto.event.FetchEventConfigDetailsForAnchorRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventconfigid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAnchoruserid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string eventConfigId = 1;
 * @return {string}
 */
proto.ai.nworx.api.proto.event.FetchEventConfigDetailsForAnchorRequest.prototype.getEventconfigid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.event.FetchEventConfigDetailsForAnchorRequest} returns this
 */
proto.ai.nworx.api.proto.event.FetchEventConfigDetailsForAnchorRequest.prototype.setEventconfigid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string anchorUserId = 2;
 * @return {string}
 */
proto.ai.nworx.api.proto.event.FetchEventConfigDetailsForAnchorRequest.prototype.getAnchoruserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.event.FetchEventConfigDetailsForAnchorRequest} returns this
 */
proto.ai.nworx.api.proto.event.FetchEventConfigDetailsForAnchorRequest.prototype.setAnchoruserid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ai.nworx.api.proto.event.AddSlotChunkOfAnchorForEventConfigRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ai.nworx.api.proto.event.AddSlotChunkOfAnchorForEventConfigRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ai.nworx.api.proto.event.AddSlotChunkOfAnchorForEventConfigRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ai.nworx.api.proto.event.AddSlotChunkOfAnchorForEventConfigRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventconfigid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    anchoruserid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    chunkstartdate: jspb.Message.getFieldWithDefault(msg, 3, 0),
    chunkenddate: jspb.Message.getFieldWithDefault(msg, 4, 0),
    singleslot: jspb.Message.getBooleanFieldWithDefault(msg, 5, false),
    eventrole: jspb.Message.getFieldWithDefault(msg, 6, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ai.nworx.api.proto.event.AddSlotChunkOfAnchorForEventConfigRequest}
 */
proto.ai.nworx.api.proto.event.AddSlotChunkOfAnchorForEventConfigRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ai.nworx.api.proto.event.AddSlotChunkOfAnchorForEventConfigRequest;
  return proto.ai.nworx.api.proto.event.AddSlotChunkOfAnchorForEventConfigRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ai.nworx.api.proto.event.AddSlotChunkOfAnchorForEventConfigRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ai.nworx.api.proto.event.AddSlotChunkOfAnchorForEventConfigRequest}
 */
proto.ai.nworx.api.proto.event.AddSlotChunkOfAnchorForEventConfigRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventconfigid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAnchoruserid(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setChunkstartdate(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt64());
      msg.setChunkenddate(value);
      break;
    case 5:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setSingleslot(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventrole(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ai.nworx.api.proto.event.AddSlotChunkOfAnchorForEventConfigRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ai.nworx.api.proto.event.AddSlotChunkOfAnchorForEventConfigRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ai.nworx.api.proto.event.AddSlotChunkOfAnchorForEventConfigRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ai.nworx.api.proto.event.AddSlotChunkOfAnchorForEventConfigRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventconfigid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAnchoruserid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getChunkstartdate();
  if (f !== 0) {
    writer.writeInt64(
      3,
      f
    );
  }
  f = message.getChunkenddate();
  if (f !== 0) {
    writer.writeInt64(
      4,
      f
    );
  }
  f = message.getSingleslot();
  if (f) {
    writer.writeBool(
      5,
      f
    );
  }
  f = message.getEventrole();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
};


/**
 * optional string eventConfigId = 1;
 * @return {string}
 */
proto.ai.nworx.api.proto.event.AddSlotChunkOfAnchorForEventConfigRequest.prototype.getEventconfigid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.event.AddSlotChunkOfAnchorForEventConfigRequest} returns this
 */
proto.ai.nworx.api.proto.event.AddSlotChunkOfAnchorForEventConfigRequest.prototype.setEventconfigid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string anchorUserId = 2;
 * @return {string}
 */
proto.ai.nworx.api.proto.event.AddSlotChunkOfAnchorForEventConfigRequest.prototype.getAnchoruserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.event.AddSlotChunkOfAnchorForEventConfigRequest} returns this
 */
proto.ai.nworx.api.proto.event.AddSlotChunkOfAnchorForEventConfigRequest.prototype.setAnchoruserid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int64 chunkStartDate = 3;
 * @return {number}
 */
proto.ai.nworx.api.proto.event.AddSlotChunkOfAnchorForEventConfigRequest.prototype.getChunkstartdate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ai.nworx.api.proto.event.AddSlotChunkOfAnchorForEventConfigRequest} returns this
 */
proto.ai.nworx.api.proto.event.AddSlotChunkOfAnchorForEventConfigRequest.prototype.setChunkstartdate = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int64 chunkEndDate = 4;
 * @return {number}
 */
proto.ai.nworx.api.proto.event.AddSlotChunkOfAnchorForEventConfigRequest.prototype.getChunkenddate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ai.nworx.api.proto.event.AddSlotChunkOfAnchorForEventConfigRequest} returns this
 */
proto.ai.nworx.api.proto.event.AddSlotChunkOfAnchorForEventConfigRequest.prototype.setChunkenddate = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional bool singleSlot = 5;
 * @return {boolean}
 */
proto.ai.nworx.api.proto.event.AddSlotChunkOfAnchorForEventConfigRequest.prototype.getSingleslot = function() {
  return /** @type {boolean} */ (jspb.Message.getBooleanFieldWithDefault(this, 5, false));
};


/**
 * @param {boolean} value
 * @return {!proto.ai.nworx.api.proto.event.AddSlotChunkOfAnchorForEventConfigRequest} returns this
 */
proto.ai.nworx.api.proto.event.AddSlotChunkOfAnchorForEventConfigRequest.prototype.setSingleslot = function(value) {
  return jspb.Message.setProto3BooleanField(this, 5, value);
};


/**
 * optional string eventRole = 6;
 * @return {string}
 */
proto.ai.nworx.api.proto.event.AddSlotChunkOfAnchorForEventConfigRequest.prototype.getEventrole = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.event.AddSlotChunkOfAnchorForEventConfigRequest} returns this
 */
proto.ai.nworx.api.proto.event.AddSlotChunkOfAnchorForEventConfigRequest.prototype.setEventrole = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ai.nworx.api.proto.event.UpdateSlotStatusOfAnchorRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ai.nworx.api.proto.event.UpdateSlotStatusOfAnchorRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ai.nworx.api.proto.event.UpdateSlotStatusOfAnchorRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ai.nworx.api.proto.event.UpdateSlotStatusOfAnchorRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ai.nworx.api.proto.event.UpdateSlotStatusOfAnchorRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventconfigid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    anchoruserid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    slotstatusList: jspb.Message.toObjectList(msg.getSlotstatusList(),
    proto.ai.nworx.api.proto.event.SlotStatusRequest.toObject, includeInstance),
    slotchunkid: jspb.Message.getFieldWithDefault(msg, 4, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ai.nworx.api.proto.event.UpdateSlotStatusOfAnchorRequest}
 */
proto.ai.nworx.api.proto.event.UpdateSlotStatusOfAnchorRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ai.nworx.api.proto.event.UpdateSlotStatusOfAnchorRequest;
  return proto.ai.nworx.api.proto.event.UpdateSlotStatusOfAnchorRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ai.nworx.api.proto.event.UpdateSlotStatusOfAnchorRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ai.nworx.api.proto.event.UpdateSlotStatusOfAnchorRequest}
 */
proto.ai.nworx.api.proto.event.UpdateSlotStatusOfAnchorRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventconfigid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAnchoruserid(value);
      break;
    case 3:
      var value = new proto.ai.nworx.api.proto.event.SlotStatusRequest;
      reader.readMessage(value,proto.ai.nworx.api.proto.event.SlotStatusRequest.deserializeBinaryFromReader);
      msg.addSlotstatus(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setSlotchunkid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ai.nworx.api.proto.event.UpdateSlotStatusOfAnchorRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ai.nworx.api.proto.event.UpdateSlotStatusOfAnchorRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ai.nworx.api.proto.event.UpdateSlotStatusOfAnchorRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ai.nworx.api.proto.event.UpdateSlotStatusOfAnchorRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventconfigid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAnchoruserid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSlotstatusList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      3,
      f,
      proto.ai.nworx.api.proto.event.SlotStatusRequest.serializeBinaryToWriter
    );
  }
  f = message.getSlotchunkid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
};


/**
 * optional string eventConfigId = 1;
 * @return {string}
 */
proto.ai.nworx.api.proto.event.UpdateSlotStatusOfAnchorRequest.prototype.getEventconfigid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.event.UpdateSlotStatusOfAnchorRequest} returns this
 */
proto.ai.nworx.api.proto.event.UpdateSlotStatusOfAnchorRequest.prototype.setEventconfigid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string anchorUserId = 2;
 * @return {string}
 */
proto.ai.nworx.api.proto.event.UpdateSlotStatusOfAnchorRequest.prototype.getAnchoruserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.event.UpdateSlotStatusOfAnchorRequest} returns this
 */
proto.ai.nworx.api.proto.event.UpdateSlotStatusOfAnchorRequest.prototype.setAnchoruserid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * repeated SlotStatusRequest slotStatus = 3;
 * @return {!Array<!proto.ai.nworx.api.proto.event.SlotStatusRequest>}
 */
proto.ai.nworx.api.proto.event.UpdateSlotStatusOfAnchorRequest.prototype.getSlotstatusList = function() {
  return /** @type{!Array<!proto.ai.nworx.api.proto.event.SlotStatusRequest>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ai.nworx.api.proto.event.SlotStatusRequest, 3));
};


/**
 * @param {!Array<!proto.ai.nworx.api.proto.event.SlotStatusRequest>} value
 * @return {!proto.ai.nworx.api.proto.event.UpdateSlotStatusOfAnchorRequest} returns this
*/
proto.ai.nworx.api.proto.event.UpdateSlotStatusOfAnchorRequest.prototype.setSlotstatusList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 3, value);
};


/**
 * @param {!proto.ai.nworx.api.proto.event.SlotStatusRequest=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ai.nworx.api.proto.event.SlotStatusRequest}
 */
proto.ai.nworx.api.proto.event.UpdateSlotStatusOfAnchorRequest.prototype.addSlotstatus = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 3, opt_value, proto.ai.nworx.api.proto.event.SlotStatusRequest, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ai.nworx.api.proto.event.UpdateSlotStatusOfAnchorRequest} returns this
 */
proto.ai.nworx.api.proto.event.UpdateSlotStatusOfAnchorRequest.prototype.clearSlotstatusList = function() {
  return this.setSlotstatusList([]);
};


/**
 * optional string slotChunkId = 4;
 * @return {string}
 */
proto.ai.nworx.api.proto.event.UpdateSlotStatusOfAnchorRequest.prototype.getSlotchunkid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.event.UpdateSlotStatusOfAnchorRequest} returns this
 */
proto.ai.nworx.api.proto.event.UpdateSlotStatusOfAnchorRequest.prototype.setSlotchunkid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ai.nworx.api.proto.event.SlotStatusRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ai.nworx.api.proto.event.SlotStatusRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ai.nworx.api.proto.event.SlotStatusRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ai.nworx.api.proto.event.SlotStatusRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    slotid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    status: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ai.nworx.api.proto.event.SlotStatusRequest}
 */
proto.ai.nworx.api.proto.event.SlotStatusRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ai.nworx.api.proto.event.SlotStatusRequest;
  return proto.ai.nworx.api.proto.event.SlotStatusRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ai.nworx.api.proto.event.SlotStatusRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ai.nworx.api.proto.event.SlotStatusRequest}
 */
proto.ai.nworx.api.proto.event.SlotStatusRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setSlotid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setStatus(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ai.nworx.api.proto.event.SlotStatusRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ai.nworx.api.proto.event.SlotStatusRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ai.nworx.api.proto.event.SlotStatusRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ai.nworx.api.proto.event.SlotStatusRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSlotid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getStatus();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string slotId = 1;
 * @return {string}
 */
proto.ai.nworx.api.proto.event.SlotStatusRequest.prototype.getSlotid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.event.SlotStatusRequest} returns this
 */
proto.ai.nworx.api.proto.event.SlotStatusRequest.prototype.setSlotid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string status = 2;
 * @return {string}
 */
proto.ai.nworx.api.proto.event.SlotStatusRequest.prototype.getStatus = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.event.SlotStatusRequest} returns this
 */
proto.ai.nworx.api.proto.event.SlotStatusRequest.prototype.setStatus = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ai.nworx.api.proto.event.FetchAllEventConfigOfParticipantRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ai.nworx.api.proto.event.FetchAllEventConfigOfParticipantRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ai.nworx.api.proto.event.FetchAllEventConfigOfParticipantRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ai.nworx.api.proto.event.FetchAllEventConfigOfParticipantRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    participantrole: jspb.Message.getFieldWithDefault(msg, 1, ""),
    participantuserid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    participantusername: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ai.nworx.api.proto.event.FetchAllEventConfigOfParticipantRequest}
 */
proto.ai.nworx.api.proto.event.FetchAllEventConfigOfParticipantRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ai.nworx.api.proto.event.FetchAllEventConfigOfParticipantRequest;
  return proto.ai.nworx.api.proto.event.FetchAllEventConfigOfParticipantRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ai.nworx.api.proto.event.FetchAllEventConfigOfParticipantRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ai.nworx.api.proto.event.FetchAllEventConfigOfParticipantRequest}
 */
proto.ai.nworx.api.proto.event.FetchAllEventConfigOfParticipantRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setParticipantrole(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setParticipantuserid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setParticipantusername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ai.nworx.api.proto.event.FetchAllEventConfigOfParticipantRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ai.nworx.api.proto.event.FetchAllEventConfigOfParticipantRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ai.nworx.api.proto.event.FetchAllEventConfigOfParticipantRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ai.nworx.api.proto.event.FetchAllEventConfigOfParticipantRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getParticipantrole();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getParticipantuserid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getParticipantusername();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string participantRole = 1;
 * @return {string}
 */
proto.ai.nworx.api.proto.event.FetchAllEventConfigOfParticipantRequest.prototype.getParticipantrole = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.event.FetchAllEventConfigOfParticipantRequest} returns this
 */
proto.ai.nworx.api.proto.event.FetchAllEventConfigOfParticipantRequest.prototype.setParticipantrole = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string participantUserId = 2;
 * @return {string}
 */
proto.ai.nworx.api.proto.event.FetchAllEventConfigOfParticipantRequest.prototype.getParticipantuserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.event.FetchAllEventConfigOfParticipantRequest} returns this
 */
proto.ai.nworx.api.proto.event.FetchAllEventConfigOfParticipantRequest.prototype.setParticipantuserid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string participantUserName = 3;
 * @return {string}
 */
proto.ai.nworx.api.proto.event.FetchAllEventConfigOfParticipantRequest.prototype.getParticipantusername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.event.FetchAllEventConfigOfParticipantRequest} returns this
 */
proto.ai.nworx.api.proto.event.FetchAllEventConfigOfParticipantRequest.prototype.setParticipantusername = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ai.nworx.api.proto.event.FetchEventSlotsRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ai.nworx.api.proto.event.FetchEventSlotsRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ai.nworx.api.proto.event.FetchEventSlotsRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ai.nworx.api.proto.event.FetchEventSlotsRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventconfigid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    userid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    eventrole: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ai.nworx.api.proto.event.FetchEventSlotsRequest}
 */
proto.ai.nworx.api.proto.event.FetchEventSlotsRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ai.nworx.api.proto.event.FetchEventSlotsRequest;
  return proto.ai.nworx.api.proto.event.FetchEventSlotsRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ai.nworx.api.proto.event.FetchEventSlotsRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ai.nworx.api.proto.event.FetchEventSlotsRequest}
 */
proto.ai.nworx.api.proto.event.FetchEventSlotsRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventconfigid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventrole(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ai.nworx.api.proto.event.FetchEventSlotsRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ai.nworx.api.proto.event.FetchEventSlotsRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ai.nworx.api.proto.event.FetchEventSlotsRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ai.nworx.api.proto.event.FetchEventSlotsRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventconfigid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getEventrole();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string eventConfigId = 1;
 * @return {string}
 */
proto.ai.nworx.api.proto.event.FetchEventSlotsRequest.prototype.getEventconfigid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.event.FetchEventSlotsRequest} returns this
 */
proto.ai.nworx.api.proto.event.FetchEventSlotsRequest.prototype.setEventconfigid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string userId = 2;
 * @return {string}
 */
proto.ai.nworx.api.proto.event.FetchEventSlotsRequest.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.event.FetchEventSlotsRequest} returns this
 */
proto.ai.nworx.api.proto.event.FetchEventSlotsRequest.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string eventRole = 3;
 * @return {string}
 */
proto.ai.nworx.api.proto.event.FetchEventSlotsRequest.prototype.getEventrole = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.event.FetchEventSlotsRequest} returns this
 */
proto.ai.nworx.api.proto.event.FetchEventSlotsRequest.prototype.setEventrole = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ai.nworx.api.proto.event.BookSlotForEventRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ai.nworx.api.proto.event.BookSlotForEventRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ai.nworx.api.proto.event.BookSlotForEventRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ai.nworx.api.proto.event.BookSlotForEventRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventconfigid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    anchoruserid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    slotid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    userid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    eventrole: jspb.Message.getFieldWithDefault(msg, 5, ""),
    goaldetails: (f = msg.getGoaldetails()) && proto.ai.nworx.api.proto.event.GoalDetail.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ai.nworx.api.proto.event.BookSlotForEventRequest}
 */
proto.ai.nworx.api.proto.event.BookSlotForEventRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ai.nworx.api.proto.event.BookSlotForEventRequest;
  return proto.ai.nworx.api.proto.event.BookSlotForEventRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ai.nworx.api.proto.event.BookSlotForEventRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ai.nworx.api.proto.event.BookSlotForEventRequest}
 */
proto.ai.nworx.api.proto.event.BookSlotForEventRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventconfigid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setAnchoruserid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setSlotid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventrole(value);
      break;
    case 6:
      var value = new proto.ai.nworx.api.proto.event.GoalDetail;
      reader.readMessage(value,proto.ai.nworx.api.proto.event.GoalDetail.deserializeBinaryFromReader);
      msg.setGoaldetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ai.nworx.api.proto.event.BookSlotForEventRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ai.nworx.api.proto.event.BookSlotForEventRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ai.nworx.api.proto.event.BookSlotForEventRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ai.nworx.api.proto.event.BookSlotForEventRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventconfigid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getAnchoruserid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getSlotid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getEventrole();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getGoaldetails();
  if (f != null) {
    writer.writeMessage(
      6,
      f,
      proto.ai.nworx.api.proto.event.GoalDetail.serializeBinaryToWriter
    );
  }
};


/**
 * optional string eventConfigId = 1;
 * @return {string}
 */
proto.ai.nworx.api.proto.event.BookSlotForEventRequest.prototype.getEventconfigid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.event.BookSlotForEventRequest} returns this
 */
proto.ai.nworx.api.proto.event.BookSlotForEventRequest.prototype.setEventconfigid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string anchorUserId = 2;
 * @return {string}
 */
proto.ai.nworx.api.proto.event.BookSlotForEventRequest.prototype.getAnchoruserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.event.BookSlotForEventRequest} returns this
 */
proto.ai.nworx.api.proto.event.BookSlotForEventRequest.prototype.setAnchoruserid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string slotId = 3;
 * @return {string}
 */
proto.ai.nworx.api.proto.event.BookSlotForEventRequest.prototype.getSlotid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.event.BookSlotForEventRequest} returns this
 */
proto.ai.nworx.api.proto.event.BookSlotForEventRequest.prototype.setSlotid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string userId = 4;
 * @return {string}
 */
proto.ai.nworx.api.proto.event.BookSlotForEventRequest.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.event.BookSlotForEventRequest} returns this
 */
proto.ai.nworx.api.proto.event.BookSlotForEventRequest.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string eventRole = 5;
 * @return {string}
 */
proto.ai.nworx.api.proto.event.BookSlotForEventRequest.prototype.getEventrole = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.event.BookSlotForEventRequest} returns this
 */
proto.ai.nworx.api.proto.event.BookSlotForEventRequest.prototype.setEventrole = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional GoalDetail goalDetails = 6;
 * @return {?proto.ai.nworx.api.proto.event.GoalDetail}
 */
proto.ai.nworx.api.proto.event.BookSlotForEventRequest.prototype.getGoaldetails = function() {
  return /** @type{?proto.ai.nworx.api.proto.event.GoalDetail} */ (
    jspb.Message.getWrapperField(this, proto.ai.nworx.api.proto.event.GoalDetail, 6));
};


/**
 * @param {?proto.ai.nworx.api.proto.event.GoalDetail|undefined} value
 * @return {!proto.ai.nworx.api.proto.event.BookSlotForEventRequest} returns this
*/
proto.ai.nworx.api.proto.event.BookSlotForEventRequest.prototype.setGoaldetails = function(value) {
  return jspb.Message.setWrapperField(this, 6, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ai.nworx.api.proto.event.BookSlotForEventRequest} returns this
 */
proto.ai.nworx.api.proto.event.BookSlotForEventRequest.prototype.clearGoaldetails = function() {
  return this.setGoaldetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ai.nworx.api.proto.event.BookSlotForEventRequest.prototype.hasGoaldetails = function() {
  return jspb.Message.getField(this, 6) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ai.nworx.api.proto.event.GoalDetail.prototype.toObject = function(opt_includeInstance) {
  return proto.ai.nworx.api.proto.event.GoalDetail.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ai.nworx.api.proto.event.GoalDetail} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ai.nworx.api.proto.event.GoalDetail.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    programid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    usergoalid: jspb.Message.getFieldWithDefault(msg, 3, ""),
    milestoneid: jspb.Message.getFieldWithDefault(msg, 4, ""),
    methodid: jspb.Message.getFieldWithDefault(msg, 5, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ai.nworx.api.proto.event.GoalDetail}
 */
proto.ai.nworx.api.proto.event.GoalDetail.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ai.nworx.api.proto.event.GoalDetail;
  return proto.ai.nworx.api.proto.event.GoalDetail.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ai.nworx.api.proto.event.GoalDetail} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ai.nworx.api.proto.event.GoalDetail}
 */
proto.ai.nworx.api.proto.event.GoalDetail.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setProgramid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsergoalid(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setMilestoneid(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setMethodid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ai.nworx.api.proto.event.GoalDetail.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ai.nworx.api.proto.event.GoalDetail.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ai.nworx.api.proto.event.GoalDetail} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ai.nworx.api.proto.event.GoalDetail.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getProgramid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getUsergoalid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getMilestoneid();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getMethodid();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
};


/**
 * optional string userId = 1;
 * @return {string}
 */
proto.ai.nworx.api.proto.event.GoalDetail.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.event.GoalDetail} returns this
 */
proto.ai.nworx.api.proto.event.GoalDetail.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string programId = 2;
 * @return {string}
 */
proto.ai.nworx.api.proto.event.GoalDetail.prototype.getProgramid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.event.GoalDetail} returns this
 */
proto.ai.nworx.api.proto.event.GoalDetail.prototype.setProgramid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string userGoalId = 3;
 * @return {string}
 */
proto.ai.nworx.api.proto.event.GoalDetail.prototype.getUsergoalid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.event.GoalDetail} returns this
 */
proto.ai.nworx.api.proto.event.GoalDetail.prototype.setUsergoalid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string milestoneId = 4;
 * @return {string}
 */
proto.ai.nworx.api.proto.event.GoalDetail.prototype.getMilestoneid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.event.GoalDetail} returns this
 */
proto.ai.nworx.api.proto.event.GoalDetail.prototype.setMilestoneid = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string methodId = 5;
 * @return {string}
 */
proto.ai.nworx.api.proto.event.GoalDetail.prototype.getMethodid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.event.GoalDetail} returns this
 */
proto.ai.nworx.api.proto.event.GoalDetail.prototype.setMethodid = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ai.nworx.api.proto.event.FetchUserEventRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ai.nworx.api.proto.event.FetchUserEventRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ai.nworx.api.proto.event.FetchUserEventRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ai.nworx.api.proto.event.FetchUserEventRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    usereventid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ai.nworx.api.proto.event.FetchUserEventRequest}
 */
proto.ai.nworx.api.proto.event.FetchUserEventRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ai.nworx.api.proto.event.FetchUserEventRequest;
  return proto.ai.nworx.api.proto.event.FetchUserEventRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ai.nworx.api.proto.event.FetchUserEventRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ai.nworx.api.proto.event.FetchUserEventRequest}
 */
proto.ai.nworx.api.proto.event.FetchUserEventRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsereventid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ai.nworx.api.proto.event.FetchUserEventRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ai.nworx.api.proto.event.FetchUserEventRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ai.nworx.api.proto.event.FetchUserEventRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ai.nworx.api.proto.event.FetchUserEventRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsereventid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string userEventId = 1;
 * @return {string}
 */
proto.ai.nworx.api.proto.event.FetchUserEventRequest.prototype.getUsereventid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.event.FetchUserEventRequest} returns this
 */
proto.ai.nworx.api.proto.event.FetchUserEventRequest.prototype.setUsereventid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ai.nworx.api.proto.event.FetchEventListRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ai.nworx.api.proto.event.FetchEventListRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ai.nworx.api.proto.event.FetchEventListRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ai.nworx.api.proto.event.FetchEventListRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    userid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    username: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ai.nworx.api.proto.event.FetchEventListRequest}
 */
proto.ai.nworx.api.proto.event.FetchEventListRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ai.nworx.api.proto.event.FetchEventListRequest;
  return proto.ai.nworx.api.proto.event.FetchEventListRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ai.nworx.api.proto.event.FetchEventListRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ai.nworx.api.proto.event.FetchEventListRequest}
 */
proto.ai.nworx.api.proto.event.FetchEventListRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserid(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsername(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ai.nworx.api.proto.event.FetchEventListRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ai.nworx.api.proto.event.FetchEventListRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ai.nworx.api.proto.event.FetchEventListRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ai.nworx.api.proto.event.FetchEventListRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getUsername();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string userId = 1;
 * @return {string}
 */
proto.ai.nworx.api.proto.event.FetchEventListRequest.prototype.getUserid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.event.FetchEventListRequest} returns this
 */
proto.ai.nworx.api.proto.event.FetchEventListRequest.prototype.setUserid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string userName = 2;
 * @return {string}
 */
proto.ai.nworx.api.proto.event.FetchEventListRequest.prototype.getUsername = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.event.FetchEventListRequest} returns this
 */
proto.ai.nworx.api.proto.event.FetchEventListRequest.prototype.setUsername = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ai.nworx.api.proto.event.FetchUserEventIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ai.nworx.api.proto.event.FetchUserEventIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ai.nworx.api.proto.event.FetchUserEventIdRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ai.nworx.api.proto.event.FetchUserEventIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    eventconfigid: jspb.Message.getFieldWithDefault(msg, 1, ""),
    goaldetails: (f = msg.getGoaldetails()) && proto.ai.nworx.api.proto.event.GoalDetail.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ai.nworx.api.proto.event.FetchUserEventIdRequest}
 */
proto.ai.nworx.api.proto.event.FetchUserEventIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ai.nworx.api.proto.event.FetchUserEventIdRequest;
  return proto.ai.nworx.api.proto.event.FetchUserEventIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ai.nworx.api.proto.event.FetchUserEventIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ai.nworx.api.proto.event.FetchUserEventIdRequest}
 */
proto.ai.nworx.api.proto.event.FetchUserEventIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setEventconfigid(value);
      break;
    case 2:
      var value = new proto.ai.nworx.api.proto.event.GoalDetail;
      reader.readMessage(value,proto.ai.nworx.api.proto.event.GoalDetail.deserializeBinaryFromReader);
      msg.setGoaldetails(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ai.nworx.api.proto.event.FetchUserEventIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ai.nworx.api.proto.event.FetchUserEventIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ai.nworx.api.proto.event.FetchUserEventIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ai.nworx.api.proto.event.FetchUserEventIdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getEventconfigid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGoaldetails();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.ai.nworx.api.proto.event.GoalDetail.serializeBinaryToWriter
    );
  }
};


/**
 * optional string eventConfigId = 1;
 * @return {string}
 */
proto.ai.nworx.api.proto.event.FetchUserEventIdRequest.prototype.getEventconfigid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.event.FetchUserEventIdRequest} returns this
 */
proto.ai.nworx.api.proto.event.FetchUserEventIdRequest.prototype.setEventconfigid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional GoalDetail goalDetails = 2;
 * @return {?proto.ai.nworx.api.proto.event.GoalDetail}
 */
proto.ai.nworx.api.proto.event.FetchUserEventIdRequest.prototype.getGoaldetails = function() {
  return /** @type{?proto.ai.nworx.api.proto.event.GoalDetail} */ (
    jspb.Message.getWrapperField(this, proto.ai.nworx.api.proto.event.GoalDetail, 2));
};


/**
 * @param {?proto.ai.nworx.api.proto.event.GoalDetail|undefined} value
 * @return {!proto.ai.nworx.api.proto.event.FetchUserEventIdRequest} returns this
*/
proto.ai.nworx.api.proto.event.FetchUserEventIdRequest.prototype.setGoaldetails = function(value) {
  return jspb.Message.setWrapperField(this, 2, value);
};


/**
 * Clears the message field making it undefined.
 * @return {!proto.ai.nworx.api.proto.event.FetchUserEventIdRequest} returns this
 */
proto.ai.nworx.api.proto.event.FetchUserEventIdRequest.prototype.clearGoaldetails = function() {
  return this.setGoaldetails(undefined);
};


/**
 * Returns whether this field is set.
 * @return {boolean}
 */
proto.ai.nworx.api.proto.event.FetchUserEventIdRequest.prototype.hasGoaldetails = function() {
  return jspb.Message.getField(this, 2) != null;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ai.nworx.api.proto.event.CompleteUserMilestoneEventRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ai.nworx.api.proto.event.CompleteUserMilestoneEventRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ai.nworx.api.proto.event.CompleteUserMilestoneEventRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ai.nworx.api.proto.event.CompleteUserMilestoneEventRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    usereventid: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ai.nworx.api.proto.event.CompleteUserMilestoneEventRequest}
 */
proto.ai.nworx.api.proto.event.CompleteUserMilestoneEventRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ai.nworx.api.proto.event.CompleteUserMilestoneEventRequest;
  return proto.ai.nworx.api.proto.event.CompleteUserMilestoneEventRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ai.nworx.api.proto.event.CompleteUserMilestoneEventRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ai.nworx.api.proto.event.CompleteUserMilestoneEventRequest}
 */
proto.ai.nworx.api.proto.event.CompleteUserMilestoneEventRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUsereventid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ai.nworx.api.proto.event.CompleteUserMilestoneEventRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ai.nworx.api.proto.event.CompleteUserMilestoneEventRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ai.nworx.api.proto.event.CompleteUserMilestoneEventRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ai.nworx.api.proto.event.CompleteUserMilestoneEventRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUsereventid();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string userEventId = 1;
 * @return {string}
 */
proto.ai.nworx.api.proto.event.CompleteUserMilestoneEventRequest.prototype.getUsereventid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ai.nworx.api.proto.event.CompleteUserMilestoneEventRequest} returns this
 */
proto.ai.nworx.api.proto.event.CompleteUserMilestoneEventRequest.prototype.setUsereventid = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.ai.nworx.api.proto.event);
