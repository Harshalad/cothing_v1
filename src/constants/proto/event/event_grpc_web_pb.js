/**
 * @fileoverview gRPC-Web generated client stub for ai.nworx.api.proto.event
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.22.2
// source: event.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var common_common_pb = require('./common/common_pb.js')
const proto = {};
proto.ai = {};
proto.ai.nworx = {};
proto.ai.nworx.api = {};
proto.ai.nworx.api.proto = {};
proto.ai.nworx.api.proto.event = require('./event_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.ai.nworx.api.proto.event.EventServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.ai.nworx.api.proto.event.EventServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ai.nworx.api.proto.event.FetchAllEventConfigOfAnchorRequest,
 *   !proto.ai.nworx.api.proto.common.ResponseProto>}
 */
const methodDescriptor_EventService_fetchAllEventConfigOfAnchor = new grpc.web.MethodDescriptor(
  '/ai.nworx.api.proto.event.EventService/fetchAllEventConfigOfAnchor',
  grpc.web.MethodType.UNARY,
  proto.ai.nworx.api.proto.event.FetchAllEventConfigOfAnchorRequest,
  common_common_pb.ResponseProto,
  /**
   * @param {!proto.ai.nworx.api.proto.event.FetchAllEventConfigOfAnchorRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_common_pb.ResponseProto.deserializeBinary
);


/**
 * @param {!proto.ai.nworx.api.proto.event.FetchAllEventConfigOfAnchorRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ai.nworx.api.proto.common.ResponseProto)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ai.nworx.api.proto.common.ResponseProto>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ai.nworx.api.proto.event.EventServiceClient.prototype.fetchAllEventConfigOfAnchor =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ai.nworx.api.proto.event.EventService/fetchAllEventConfigOfAnchor',
      request,
      metadata || {},
      methodDescriptor_EventService_fetchAllEventConfigOfAnchor,
      callback);
};


/**
 * @param {!proto.ai.nworx.api.proto.event.FetchAllEventConfigOfAnchorRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ai.nworx.api.proto.common.ResponseProto>}
 *     Promise that resolves to the response
 */
proto.ai.nworx.api.proto.event.EventServicePromiseClient.prototype.fetchAllEventConfigOfAnchor =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ai.nworx.api.proto.event.EventService/fetchAllEventConfigOfAnchor',
      request,
      metadata || {},
      methodDescriptor_EventService_fetchAllEventConfigOfAnchor);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ai.nworx.api.proto.event.FetchAllEventConfigOfAnchorRequest,
 *   !proto.ai.nworx.api.proto.common.ResponseProto>}
 */
const methodDescriptor_EventService_fetchEventListOfAnchor = new grpc.web.MethodDescriptor(
  '/ai.nworx.api.proto.event.EventService/fetchEventListOfAnchor',
  grpc.web.MethodType.UNARY,
  proto.ai.nworx.api.proto.event.FetchAllEventConfigOfAnchorRequest,
  common_common_pb.ResponseProto,
  /**
   * @param {!proto.ai.nworx.api.proto.event.FetchAllEventConfigOfAnchorRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_common_pb.ResponseProto.deserializeBinary
);


/**
 * @param {!proto.ai.nworx.api.proto.event.FetchAllEventConfigOfAnchorRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ai.nworx.api.proto.common.ResponseProto)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ai.nworx.api.proto.common.ResponseProto>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ai.nworx.api.proto.event.EventServiceClient.prototype.fetchEventListOfAnchor =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ai.nworx.api.proto.event.EventService/fetchEventListOfAnchor',
      request,
      metadata || {},
      methodDescriptor_EventService_fetchEventListOfAnchor,
      callback);
};


/**
 * @param {!proto.ai.nworx.api.proto.event.FetchAllEventConfigOfAnchorRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ai.nworx.api.proto.common.ResponseProto>}
 *     Promise that resolves to the response
 */
proto.ai.nworx.api.proto.event.EventServicePromiseClient.prototype.fetchEventListOfAnchor =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ai.nworx.api.proto.event.EventService/fetchEventListOfAnchor',
      request,
      metadata || {},
      methodDescriptor_EventService_fetchEventListOfAnchor);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ai.nworx.api.proto.event.FetchEventConfigDetailsForAnchorRequest,
 *   !proto.ai.nworx.api.proto.common.ResponseProto>}
 */
const methodDescriptor_EventService_fetchEventConfigDetailsForAnchor = new grpc.web.MethodDescriptor(
  '/ai.nworx.api.proto.event.EventService/fetchEventConfigDetailsForAnchor',
  grpc.web.MethodType.UNARY,
  proto.ai.nworx.api.proto.event.FetchEventConfigDetailsForAnchorRequest,
  common_common_pb.ResponseProto,
  /**
   * @param {!proto.ai.nworx.api.proto.event.FetchEventConfigDetailsForAnchorRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_common_pb.ResponseProto.deserializeBinary
);


/**
 * @param {!proto.ai.nworx.api.proto.event.FetchEventConfigDetailsForAnchorRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ai.nworx.api.proto.common.ResponseProto)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ai.nworx.api.proto.common.ResponseProto>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ai.nworx.api.proto.event.EventServiceClient.prototype.fetchEventConfigDetailsForAnchor =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ai.nworx.api.proto.event.EventService/fetchEventConfigDetailsForAnchor',
      request,
      metadata || {},
      methodDescriptor_EventService_fetchEventConfigDetailsForAnchor,
      callback);
};


/**
 * @param {!proto.ai.nworx.api.proto.event.FetchEventConfigDetailsForAnchorRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ai.nworx.api.proto.common.ResponseProto>}
 *     Promise that resolves to the response
 */
proto.ai.nworx.api.proto.event.EventServicePromiseClient.prototype.fetchEventConfigDetailsForAnchor =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ai.nworx.api.proto.event.EventService/fetchEventConfigDetailsForAnchor',
      request,
      metadata || {},
      methodDescriptor_EventService_fetchEventConfigDetailsForAnchor);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ai.nworx.api.proto.event.AddSlotChunkOfAnchorForEventConfigRequest,
 *   !proto.ai.nworx.api.proto.common.ResponseProto>}
 */
const methodDescriptor_EventService_addSlotChunkOfAnchorForEventConfig = new grpc.web.MethodDescriptor(
  '/ai.nworx.api.proto.event.EventService/addSlotChunkOfAnchorForEventConfig',
  grpc.web.MethodType.UNARY,
  proto.ai.nworx.api.proto.event.AddSlotChunkOfAnchorForEventConfigRequest,
  common_common_pb.ResponseProto,
  /**
   * @param {!proto.ai.nworx.api.proto.event.AddSlotChunkOfAnchorForEventConfigRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_common_pb.ResponseProto.deserializeBinary
);


/**
 * @param {!proto.ai.nworx.api.proto.event.AddSlotChunkOfAnchorForEventConfigRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ai.nworx.api.proto.common.ResponseProto)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ai.nworx.api.proto.common.ResponseProto>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ai.nworx.api.proto.event.EventServiceClient.prototype.addSlotChunkOfAnchorForEventConfig =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ai.nworx.api.proto.event.EventService/addSlotChunkOfAnchorForEventConfig',
      request,
      metadata || {},
      methodDescriptor_EventService_addSlotChunkOfAnchorForEventConfig,
      callback);
};


/**
 * @param {!proto.ai.nworx.api.proto.event.AddSlotChunkOfAnchorForEventConfigRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ai.nworx.api.proto.common.ResponseProto>}
 *     Promise that resolves to the response
 */
proto.ai.nworx.api.proto.event.EventServicePromiseClient.prototype.addSlotChunkOfAnchorForEventConfig =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ai.nworx.api.proto.event.EventService/addSlotChunkOfAnchorForEventConfig',
      request,
      metadata || {},
      methodDescriptor_EventService_addSlotChunkOfAnchorForEventConfig);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ai.nworx.api.proto.event.UpdateSlotStatusOfAnchorRequest,
 *   !proto.ai.nworx.api.proto.common.ResponseProto>}
 */
const methodDescriptor_EventService_updateSlotStatusOfAnchor = new grpc.web.MethodDescriptor(
  '/ai.nworx.api.proto.event.EventService/updateSlotStatusOfAnchor',
  grpc.web.MethodType.UNARY,
  proto.ai.nworx.api.proto.event.UpdateSlotStatusOfAnchorRequest,
  common_common_pb.ResponseProto,
  /**
   * @param {!proto.ai.nworx.api.proto.event.UpdateSlotStatusOfAnchorRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_common_pb.ResponseProto.deserializeBinary
);


/**
 * @param {!proto.ai.nworx.api.proto.event.UpdateSlotStatusOfAnchorRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ai.nworx.api.proto.common.ResponseProto)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ai.nworx.api.proto.common.ResponseProto>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ai.nworx.api.proto.event.EventServiceClient.prototype.updateSlotStatusOfAnchor =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ai.nworx.api.proto.event.EventService/updateSlotStatusOfAnchor',
      request,
      metadata || {},
      methodDescriptor_EventService_updateSlotStatusOfAnchor,
      callback);
};


/**
 * @param {!proto.ai.nworx.api.proto.event.UpdateSlotStatusOfAnchorRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ai.nworx.api.proto.common.ResponseProto>}
 *     Promise that resolves to the response
 */
proto.ai.nworx.api.proto.event.EventServicePromiseClient.prototype.updateSlotStatusOfAnchor =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ai.nworx.api.proto.event.EventService/updateSlotStatusOfAnchor',
      request,
      metadata || {},
      methodDescriptor_EventService_updateSlotStatusOfAnchor);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ai.nworx.api.proto.event.FetchAllEventConfigOfParticipantRequest,
 *   !proto.ai.nworx.api.proto.common.ResponseProto>}
 */
const methodDescriptor_EventService_fetchAllEventConfigOfParticipant = new grpc.web.MethodDescriptor(
  '/ai.nworx.api.proto.event.EventService/fetchAllEventConfigOfParticipant',
  grpc.web.MethodType.UNARY,
  proto.ai.nworx.api.proto.event.FetchAllEventConfigOfParticipantRequest,
  common_common_pb.ResponseProto,
  /**
   * @param {!proto.ai.nworx.api.proto.event.FetchAllEventConfigOfParticipantRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_common_pb.ResponseProto.deserializeBinary
);


/**
 * @param {!proto.ai.nworx.api.proto.event.FetchAllEventConfigOfParticipantRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ai.nworx.api.proto.common.ResponseProto)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ai.nworx.api.proto.common.ResponseProto>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ai.nworx.api.proto.event.EventServiceClient.prototype.fetchAllEventConfigOfParticipant =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ai.nworx.api.proto.event.EventService/fetchAllEventConfigOfParticipant',
      request,
      metadata || {},
      methodDescriptor_EventService_fetchAllEventConfigOfParticipant,
      callback);
};


/**
 * @param {!proto.ai.nworx.api.proto.event.FetchAllEventConfigOfParticipantRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ai.nworx.api.proto.common.ResponseProto>}
 *     Promise that resolves to the response
 */
proto.ai.nworx.api.proto.event.EventServicePromiseClient.prototype.fetchAllEventConfigOfParticipant =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ai.nworx.api.proto.event.EventService/fetchAllEventConfigOfParticipant',
      request,
      metadata || {},
      methodDescriptor_EventService_fetchAllEventConfigOfParticipant);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ai.nworx.api.proto.event.FetchAllEventConfigOfParticipantRequest,
 *   !proto.ai.nworx.api.proto.common.ResponseProto>}
 */
const methodDescriptor_EventService_fetchEventListOfParticipant = new grpc.web.MethodDescriptor(
  '/ai.nworx.api.proto.event.EventService/fetchEventListOfParticipant',
  grpc.web.MethodType.UNARY,
  proto.ai.nworx.api.proto.event.FetchAllEventConfigOfParticipantRequest,
  common_common_pb.ResponseProto,
  /**
   * @param {!proto.ai.nworx.api.proto.event.FetchAllEventConfigOfParticipantRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_common_pb.ResponseProto.deserializeBinary
);


/**
 * @param {!proto.ai.nworx.api.proto.event.FetchAllEventConfigOfParticipantRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ai.nworx.api.proto.common.ResponseProto)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ai.nworx.api.proto.common.ResponseProto>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ai.nworx.api.proto.event.EventServiceClient.prototype.fetchEventListOfParticipant =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ai.nworx.api.proto.event.EventService/fetchEventListOfParticipant',
      request,
      metadata || {},
      methodDescriptor_EventService_fetchEventListOfParticipant,
      callback);
};


/**
 * @param {!proto.ai.nworx.api.proto.event.FetchAllEventConfigOfParticipantRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ai.nworx.api.proto.common.ResponseProto>}
 *     Promise that resolves to the response
 */
proto.ai.nworx.api.proto.event.EventServicePromiseClient.prototype.fetchEventListOfParticipant =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ai.nworx.api.proto.event.EventService/fetchEventListOfParticipant',
      request,
      metadata || {},
      methodDescriptor_EventService_fetchEventListOfParticipant);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ai.nworx.api.proto.event.FetchEventSlotsRequest,
 *   !proto.ai.nworx.api.proto.common.ResponseProto>}
 */
const methodDescriptor_EventService_fetchEventSlots = new grpc.web.MethodDescriptor(
  '/ai.nworx.api.proto.event.EventService/fetchEventSlots',
  grpc.web.MethodType.UNARY,
  proto.ai.nworx.api.proto.event.FetchEventSlotsRequest,
  common_common_pb.ResponseProto,
  /**
   * @param {!proto.ai.nworx.api.proto.event.FetchEventSlotsRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_common_pb.ResponseProto.deserializeBinary
);


/**
 * @param {!proto.ai.nworx.api.proto.event.FetchEventSlotsRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ai.nworx.api.proto.common.ResponseProto)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ai.nworx.api.proto.common.ResponseProto>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ai.nworx.api.proto.event.EventServiceClient.prototype.fetchEventSlots =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ai.nworx.api.proto.event.EventService/fetchEventSlots',
      request,
      metadata || {},
      methodDescriptor_EventService_fetchEventSlots,
      callback);
};


/**
 * @param {!proto.ai.nworx.api.proto.event.FetchEventSlotsRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ai.nworx.api.proto.common.ResponseProto>}
 *     Promise that resolves to the response
 */
proto.ai.nworx.api.proto.event.EventServicePromiseClient.prototype.fetchEventSlots =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ai.nworx.api.proto.event.EventService/fetchEventSlots',
      request,
      metadata || {},
      methodDescriptor_EventService_fetchEventSlots);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ai.nworx.api.proto.event.BookSlotForEventRequest,
 *   !proto.ai.nworx.api.proto.common.ResponseProto>}
 */
const methodDescriptor_EventService_bookSlotForEvent = new grpc.web.MethodDescriptor(
  '/ai.nworx.api.proto.event.EventService/bookSlotForEvent',
  grpc.web.MethodType.UNARY,
  proto.ai.nworx.api.proto.event.BookSlotForEventRequest,
  common_common_pb.ResponseProto,
  /**
   * @param {!proto.ai.nworx.api.proto.event.BookSlotForEventRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_common_pb.ResponseProto.deserializeBinary
);


/**
 * @param {!proto.ai.nworx.api.proto.event.BookSlotForEventRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ai.nworx.api.proto.common.ResponseProto)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ai.nworx.api.proto.common.ResponseProto>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ai.nworx.api.proto.event.EventServiceClient.prototype.bookSlotForEvent =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ai.nworx.api.proto.event.EventService/bookSlotForEvent',
      request,
      metadata || {},
      methodDescriptor_EventService_bookSlotForEvent,
      callback);
};


/**
 * @param {!proto.ai.nworx.api.proto.event.BookSlotForEventRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ai.nworx.api.proto.common.ResponseProto>}
 *     Promise that resolves to the response
 */
proto.ai.nworx.api.proto.event.EventServicePromiseClient.prototype.bookSlotForEvent =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ai.nworx.api.proto.event.EventService/bookSlotForEvent',
      request,
      metadata || {},
      methodDescriptor_EventService_bookSlotForEvent);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ai.nworx.api.proto.event.FetchUserEventRequest,
 *   !proto.ai.nworx.api.proto.common.ResponseProto>}
 */
const methodDescriptor_EventService_fetchUserEvent = new grpc.web.MethodDescriptor(
  '/ai.nworx.api.proto.event.EventService/fetchUserEvent',
  grpc.web.MethodType.UNARY,
  proto.ai.nworx.api.proto.event.FetchUserEventRequest,
  common_common_pb.ResponseProto,
  /**
   * @param {!proto.ai.nworx.api.proto.event.FetchUserEventRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_common_pb.ResponseProto.deserializeBinary
);


/**
 * @param {!proto.ai.nworx.api.proto.event.FetchUserEventRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ai.nworx.api.proto.common.ResponseProto)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ai.nworx.api.proto.common.ResponseProto>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ai.nworx.api.proto.event.EventServiceClient.prototype.fetchUserEvent =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ai.nworx.api.proto.event.EventService/fetchUserEvent',
      request,
      metadata || {},
      methodDescriptor_EventService_fetchUserEvent,
      callback);
};


/**
 * @param {!proto.ai.nworx.api.proto.event.FetchUserEventRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ai.nworx.api.proto.common.ResponseProto>}
 *     Promise that resolves to the response
 */
proto.ai.nworx.api.proto.event.EventServicePromiseClient.prototype.fetchUserEvent =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ai.nworx.api.proto.event.EventService/fetchUserEvent',
      request,
      metadata || {},
      methodDescriptor_EventService_fetchUserEvent);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ai.nworx.api.proto.event.FetchEventListRequest,
 *   !proto.ai.nworx.api.proto.common.ResponseProto>}
 */
const methodDescriptor_EventService_fetchEventList = new grpc.web.MethodDescriptor(
  '/ai.nworx.api.proto.event.EventService/fetchEventList',
  grpc.web.MethodType.UNARY,
  proto.ai.nworx.api.proto.event.FetchEventListRequest,
  common_common_pb.ResponseProto,
  /**
   * @param {!proto.ai.nworx.api.proto.event.FetchEventListRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_common_pb.ResponseProto.deserializeBinary
);


/**
 * @param {!proto.ai.nworx.api.proto.event.FetchEventListRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ai.nworx.api.proto.common.ResponseProto)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ai.nworx.api.proto.common.ResponseProto>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ai.nworx.api.proto.event.EventServiceClient.prototype.fetchEventList =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ai.nworx.api.proto.event.EventService/fetchEventList',
      request,
      metadata || {},
      methodDescriptor_EventService_fetchEventList,
      callback);
};


/**
 * @param {!proto.ai.nworx.api.proto.event.FetchEventListRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ai.nworx.api.proto.common.ResponseProto>}
 *     Promise that resolves to the response
 */
proto.ai.nworx.api.proto.event.EventServicePromiseClient.prototype.fetchEventList =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ai.nworx.api.proto.event.EventService/fetchEventList',
      request,
      metadata || {},
      methodDescriptor_EventService_fetchEventList);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ai.nworx.api.proto.event.FetchUserEventIdRequest,
 *   !proto.ai.nworx.api.proto.common.ResponseProto>}
 */
const methodDescriptor_EventService_fetchUserEventId = new grpc.web.MethodDescriptor(
  '/ai.nworx.api.proto.event.EventService/fetchUserEventId',
  grpc.web.MethodType.UNARY,
  proto.ai.nworx.api.proto.event.FetchUserEventIdRequest,
  common_common_pb.ResponseProto,
  /**
   * @param {!proto.ai.nworx.api.proto.event.FetchUserEventIdRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_common_pb.ResponseProto.deserializeBinary
);


/**
 * @param {!proto.ai.nworx.api.proto.event.FetchUserEventIdRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ai.nworx.api.proto.common.ResponseProto)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ai.nworx.api.proto.common.ResponseProto>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ai.nworx.api.proto.event.EventServiceClient.prototype.fetchUserEventId =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ai.nworx.api.proto.event.EventService/fetchUserEventId',
      request,
      metadata || {},
      methodDescriptor_EventService_fetchUserEventId,
      callback);
};


/**
 * @param {!proto.ai.nworx.api.proto.event.FetchUserEventIdRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ai.nworx.api.proto.common.ResponseProto>}
 *     Promise that resolves to the response
 */
proto.ai.nworx.api.proto.event.EventServicePromiseClient.prototype.fetchUserEventId =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ai.nworx.api.proto.event.EventService/fetchUserEventId',
      request,
      metadata || {},
      methodDescriptor_EventService_fetchUserEventId);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ai.nworx.api.proto.event.CompleteUserMilestoneEventRequest,
 *   !proto.ai.nworx.api.proto.common.ResponseProto>}
 */
const methodDescriptor_EventService_completeUserMilestoneEvent = new grpc.web.MethodDescriptor(
  '/ai.nworx.api.proto.event.EventService/completeUserMilestoneEvent',
  grpc.web.MethodType.UNARY,
  proto.ai.nworx.api.proto.event.CompleteUserMilestoneEventRequest,
  common_common_pb.ResponseProto,
  /**
   * @param {!proto.ai.nworx.api.proto.event.CompleteUserMilestoneEventRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_common_pb.ResponseProto.deserializeBinary
);


/**
 * @param {!proto.ai.nworx.api.proto.event.CompleteUserMilestoneEventRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ai.nworx.api.proto.common.ResponseProto)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ai.nworx.api.proto.common.ResponseProto>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ai.nworx.api.proto.event.EventServiceClient.prototype.completeUserMilestoneEvent =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ai.nworx.api.proto.event.EventService/completeUserMilestoneEvent',
      request,
      metadata || {},
      methodDescriptor_EventService_completeUserMilestoneEvent,
      callback);
};


/**
 * @param {!proto.ai.nworx.api.proto.event.CompleteUserMilestoneEventRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ai.nworx.api.proto.common.ResponseProto>}
 *     Promise that resolves to the response
 */
proto.ai.nworx.api.proto.event.EventServicePromiseClient.prototype.completeUserMilestoneEvent =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ai.nworx.api.proto.event.EventService/completeUserMilestoneEvent',
      request,
      metadata || {},
      methodDescriptor_EventService_completeUserMilestoneEvent);
};


module.exports = proto.ai.nworx.api.proto.event;

