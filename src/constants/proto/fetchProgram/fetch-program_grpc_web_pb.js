/**
 * @fileoverview gRPC-Web generated client stub for ai.nworx.api.proto.program
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.4.2
// 	protoc              v4.24.2
// source: fetch-program.proto


/* eslint-disable */
// @ts-nocheck



const grpc = {};
grpc.web = require('grpc-web');


var common_common_pb = require('./common/common_pb.js')
const proto = {};
proto.ai = {};
proto.ai.nworx = {};
proto.ai.nworx.api = {};
proto.ai.nworx.api.proto = {};
proto.ai.nworx.api.proto.program = require('./fetch-program_pb.js');

/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.ai.nworx.api.proto.program.FetchProgramServiceClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @param {string} hostname
 * @param {?Object} credentials
 * @param {?grpc.web.ClientOptions} options
 * @constructor
 * @struct
 * @final
 */
proto.ai.nworx.api.proto.program.FetchProgramServicePromiseClient =
    function(hostname, credentials, options) {
  if (!options) options = {};
  options.format = 'text';

  /**
   * @private @const {!grpc.web.GrpcWebClientBase} The client
   */
  this.client_ = new grpc.web.GrpcWebClientBase(options);

  /**
   * @private @const {string} The hostname
   */
  this.hostname_ = hostname.replace(/\/+$/, '');

};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ai.nworx.api.proto.program.FetchProgramRequest,
 *   !proto.ai.nworx.api.proto.common.ResponseProto>}
 */
const methodDescriptor_FetchProgramService_fetchProgram = new grpc.web.MethodDescriptor(
  '/ai.nworx.api.proto.program.FetchProgramService/fetchProgram',
  grpc.web.MethodType.UNARY,
  proto.ai.nworx.api.proto.program.FetchProgramRequest,
  common_common_pb.ResponseProto,
  /**
   * @param {!proto.ai.nworx.api.proto.program.FetchProgramRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_common_pb.ResponseProto.deserializeBinary
);


/**
 * @param {!proto.ai.nworx.api.proto.program.FetchProgramRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ai.nworx.api.proto.common.ResponseProto)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ai.nworx.api.proto.common.ResponseProto>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ai.nworx.api.proto.program.FetchProgramServiceClient.prototype.fetchProgram =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ai.nworx.api.proto.program.FetchProgramService/fetchProgram',
      request,
      metadata || {},
      methodDescriptor_FetchProgramService_fetchProgram,
      callback);
};


/**
 * @param {!proto.ai.nworx.api.proto.program.FetchProgramRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ai.nworx.api.proto.common.ResponseProto>}
 *     Promise that resolves to the response
 */
proto.ai.nworx.api.proto.program.FetchProgramServicePromiseClient.prototype.fetchProgram =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ai.nworx.api.proto.program.FetchProgramService/fetchProgram',
      request,
      metadata || {},
      methodDescriptor_FetchProgramService_fetchProgram);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ai.nworx.api.proto.program.FetchProgramRequest,
 *   !proto.ai.nworx.api.proto.common.ResponseProto>}
 */
const methodDescriptor_FetchProgramService_fetchProgramGoals = new grpc.web.MethodDescriptor(
  '/ai.nworx.api.proto.program.FetchProgramService/fetchProgramGoals',
  grpc.web.MethodType.UNARY,
  proto.ai.nworx.api.proto.program.FetchProgramRequest,
  common_common_pb.ResponseProto,
  /**
   * @param {!proto.ai.nworx.api.proto.program.FetchProgramRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_common_pb.ResponseProto.deserializeBinary
);


/**
 * @param {!proto.ai.nworx.api.proto.program.FetchProgramRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ai.nworx.api.proto.common.ResponseProto)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ai.nworx.api.proto.common.ResponseProto>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ai.nworx.api.proto.program.FetchProgramServiceClient.prototype.fetchProgramGoals =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ai.nworx.api.proto.program.FetchProgramService/fetchProgramGoals',
      request,
      metadata || {},
      methodDescriptor_FetchProgramService_fetchProgramGoals,
      callback);
};


/**
 * @param {!proto.ai.nworx.api.proto.program.FetchProgramRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ai.nworx.api.proto.common.ResponseProto>}
 *     Promise that resolves to the response
 */
proto.ai.nworx.api.proto.program.FetchProgramServicePromiseClient.prototype.fetchProgramGoals =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ai.nworx.api.proto.program.FetchProgramService/fetchProgramGoals',
      request,
      metadata || {},
      methodDescriptor_FetchProgramService_fetchProgramGoals);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ai.nworx.api.proto.program.FetchProgramRequest,
 *   !proto.ai.nworx.api.proto.common.ResponseProto>}
 */
const methodDescriptor_FetchProgramService_fetchOrgGoals = new grpc.web.MethodDescriptor(
  '/ai.nworx.api.proto.program.FetchProgramService/fetchOrgGoals',
  grpc.web.MethodType.UNARY,
  proto.ai.nworx.api.proto.program.FetchProgramRequest,
  common_common_pb.ResponseProto,
  /**
   * @param {!proto.ai.nworx.api.proto.program.FetchProgramRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_common_pb.ResponseProto.deserializeBinary
);


/**
 * @param {!proto.ai.nworx.api.proto.program.FetchProgramRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ai.nworx.api.proto.common.ResponseProto)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ai.nworx.api.proto.common.ResponseProto>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ai.nworx.api.proto.program.FetchProgramServiceClient.prototype.fetchOrgGoals =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ai.nworx.api.proto.program.FetchProgramService/fetchOrgGoals',
      request,
      metadata || {},
      methodDescriptor_FetchProgramService_fetchOrgGoals,
      callback);
};


/**
 * @param {!proto.ai.nworx.api.proto.program.FetchProgramRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ai.nworx.api.proto.common.ResponseProto>}
 *     Promise that resolves to the response
 */
proto.ai.nworx.api.proto.program.FetchProgramServicePromiseClient.prototype.fetchOrgGoals =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ai.nworx.api.proto.program.FetchProgramService/fetchOrgGoals',
      request,
      metadata || {},
      methodDescriptor_FetchProgramService_fetchOrgGoals);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ai.nworx.api.proto.program.FetchProgramRequest,
 *   !proto.ai.nworx.api.proto.common.ResponseProto>}
 */
const methodDescriptor_FetchProgramService_fetchDepartmentGoals = new grpc.web.MethodDescriptor(
  '/ai.nworx.api.proto.program.FetchProgramService/fetchDepartmentGoals',
  grpc.web.MethodType.UNARY,
  proto.ai.nworx.api.proto.program.FetchProgramRequest,
  common_common_pb.ResponseProto,
  /**
   * @param {!proto.ai.nworx.api.proto.program.FetchProgramRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_common_pb.ResponseProto.deserializeBinary
);


/**
 * @param {!proto.ai.nworx.api.proto.program.FetchProgramRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ai.nworx.api.proto.common.ResponseProto)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ai.nworx.api.proto.common.ResponseProto>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ai.nworx.api.proto.program.FetchProgramServiceClient.prototype.fetchDepartmentGoals =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ai.nworx.api.proto.program.FetchProgramService/fetchDepartmentGoals',
      request,
      metadata || {},
      methodDescriptor_FetchProgramService_fetchDepartmentGoals,
      callback);
};


/**
 * @param {!proto.ai.nworx.api.proto.program.FetchProgramRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ai.nworx.api.proto.common.ResponseProto>}
 *     Promise that resolves to the response
 */
proto.ai.nworx.api.proto.program.FetchProgramServicePromiseClient.prototype.fetchDepartmentGoals =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ai.nworx.api.proto.program.FetchProgramService/fetchDepartmentGoals',
      request,
      metadata || {},
      methodDescriptor_FetchProgramService_fetchDepartmentGoals);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ai.nworx.api.proto.program.FetchProgramRequest,
 *   !proto.ai.nworx.api.proto.common.ResponseProto>}
 */
const methodDescriptor_FetchProgramService_fetchQuestionSet = new grpc.web.MethodDescriptor(
  '/ai.nworx.api.proto.program.FetchProgramService/fetchQuestionSet',
  grpc.web.MethodType.UNARY,
  proto.ai.nworx.api.proto.program.FetchProgramRequest,
  common_common_pb.ResponseProto,
  /**
   * @param {!proto.ai.nworx.api.proto.program.FetchProgramRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_common_pb.ResponseProto.deserializeBinary
);


/**
 * @param {!proto.ai.nworx.api.proto.program.FetchProgramRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ai.nworx.api.proto.common.ResponseProto)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ai.nworx.api.proto.common.ResponseProto>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ai.nworx.api.proto.program.FetchProgramServiceClient.prototype.fetchQuestionSet =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ai.nworx.api.proto.program.FetchProgramService/fetchQuestionSet',
      request,
      metadata || {},
      methodDescriptor_FetchProgramService_fetchQuestionSet,
      callback);
};


/**
 * @param {!proto.ai.nworx.api.proto.program.FetchProgramRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ai.nworx.api.proto.common.ResponseProto>}
 *     Promise that resolves to the response
 */
proto.ai.nworx.api.proto.program.FetchProgramServicePromiseClient.prototype.fetchQuestionSet =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ai.nworx.api.proto.program.FetchProgramService/fetchQuestionSet',
      request,
      metadata || {},
      methodDescriptor_FetchProgramService_fetchQuestionSet);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ai.nworx.api.proto.program.FetchProgramRequest,
 *   !proto.ai.nworx.api.proto.common.ResponseProto>}
 */
const methodDescriptor_FetchProgramService_fetchPurposeStatements = new grpc.web.MethodDescriptor(
  '/ai.nworx.api.proto.program.FetchProgramService/fetchPurposeStatements',
  grpc.web.MethodType.UNARY,
  proto.ai.nworx.api.proto.program.FetchProgramRequest,
  common_common_pb.ResponseProto,
  /**
   * @param {!proto.ai.nworx.api.proto.program.FetchProgramRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_common_pb.ResponseProto.deserializeBinary
);


/**
 * @param {!proto.ai.nworx.api.proto.program.FetchProgramRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ai.nworx.api.proto.common.ResponseProto)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ai.nworx.api.proto.common.ResponseProto>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ai.nworx.api.proto.program.FetchProgramServiceClient.prototype.fetchPurposeStatements =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ai.nworx.api.proto.program.FetchProgramService/fetchPurposeStatements',
      request,
      metadata || {},
      methodDescriptor_FetchProgramService_fetchPurposeStatements,
      callback);
};


/**
 * @param {!proto.ai.nworx.api.proto.program.FetchProgramRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ai.nworx.api.proto.common.ResponseProto>}
 *     Promise that resolves to the response
 */
proto.ai.nworx.api.proto.program.FetchProgramServicePromiseClient.prototype.fetchPurposeStatements =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ai.nworx.api.proto.program.FetchProgramService/fetchPurposeStatements',
      request,
      metadata || {},
      methodDescriptor_FetchProgramService_fetchPurposeStatements);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ai.nworx.api.proto.program.FetchProgramRequest,
 *   !proto.ai.nworx.api.proto.common.ResponseProto>}
 */
const methodDescriptor_FetchProgramService_fetchBenefitStatements = new grpc.web.MethodDescriptor(
  '/ai.nworx.api.proto.program.FetchProgramService/fetchBenefitStatements',
  grpc.web.MethodType.UNARY,
  proto.ai.nworx.api.proto.program.FetchProgramRequest,
  common_common_pb.ResponseProto,
  /**
   * @param {!proto.ai.nworx.api.proto.program.FetchProgramRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_common_pb.ResponseProto.deserializeBinary
);


/**
 * @param {!proto.ai.nworx.api.proto.program.FetchProgramRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ai.nworx.api.proto.common.ResponseProto)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ai.nworx.api.proto.common.ResponseProto>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ai.nworx.api.proto.program.FetchProgramServiceClient.prototype.fetchBenefitStatements =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ai.nworx.api.proto.program.FetchProgramService/fetchBenefitStatements',
      request,
      metadata || {},
      methodDescriptor_FetchProgramService_fetchBenefitStatements,
      callback);
};


/**
 * @param {!proto.ai.nworx.api.proto.program.FetchProgramRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ai.nworx.api.proto.common.ResponseProto>}
 *     Promise that resolves to the response
 */
proto.ai.nworx.api.proto.program.FetchProgramServicePromiseClient.prototype.fetchBenefitStatements =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ai.nworx.api.proto.program.FetchProgramService/fetchBenefitStatements',
      request,
      metadata || {},
      methodDescriptor_FetchProgramService_fetchBenefitStatements);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ai.nworx.api.proto.program.FetchProgramRequest,
 *   !proto.ai.nworx.api.proto.common.ResponseProto>}
 */
const methodDescriptor_FetchProgramService_fetchProgramGoalsByOrganisationMandate = new grpc.web.MethodDescriptor(
  '/ai.nworx.api.proto.program.FetchProgramService/fetchProgramGoalsByOrganisationMandate',
  grpc.web.MethodType.UNARY,
  proto.ai.nworx.api.proto.program.FetchProgramRequest,
  common_common_pb.ResponseProto,
  /**
   * @param {!proto.ai.nworx.api.proto.program.FetchProgramRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_common_pb.ResponseProto.deserializeBinary
);


/**
 * @param {!proto.ai.nworx.api.proto.program.FetchProgramRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ai.nworx.api.proto.common.ResponseProto)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ai.nworx.api.proto.common.ResponseProto>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ai.nworx.api.proto.program.FetchProgramServiceClient.prototype.fetchProgramGoalsByOrganisationMandate =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ai.nworx.api.proto.program.FetchProgramService/fetchProgramGoalsByOrganisationMandate',
      request,
      metadata || {},
      methodDescriptor_FetchProgramService_fetchProgramGoalsByOrganisationMandate,
      callback);
};


/**
 * @param {!proto.ai.nworx.api.proto.program.FetchProgramRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ai.nworx.api.proto.common.ResponseProto>}
 *     Promise that resolves to the response
 */
proto.ai.nworx.api.proto.program.FetchProgramServicePromiseClient.prototype.fetchProgramGoalsByOrganisationMandate =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ai.nworx.api.proto.program.FetchProgramService/fetchProgramGoalsByOrganisationMandate',
      request,
      metadata || {},
      methodDescriptor_FetchProgramService_fetchProgramGoalsByOrganisationMandate);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ai.nworx.api.proto.program.FetchProgramRequest,
 *   !proto.ai.nworx.api.proto.common.ResponseProto>}
 */
const methodDescriptor_FetchProgramService_fetchDevelopmentAreas = new grpc.web.MethodDescriptor(
  '/ai.nworx.api.proto.program.FetchProgramService/fetchDevelopmentAreas',
  grpc.web.MethodType.UNARY,
  proto.ai.nworx.api.proto.program.FetchProgramRequest,
  common_common_pb.ResponseProto,
  /**
   * @param {!proto.ai.nworx.api.proto.program.FetchProgramRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_common_pb.ResponseProto.deserializeBinary
);


/**
 * @param {!proto.ai.nworx.api.proto.program.FetchProgramRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ai.nworx.api.proto.common.ResponseProto)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ai.nworx.api.proto.common.ResponseProto>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ai.nworx.api.proto.program.FetchProgramServiceClient.prototype.fetchDevelopmentAreas =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ai.nworx.api.proto.program.FetchProgramService/fetchDevelopmentAreas',
      request,
      metadata || {},
      methodDescriptor_FetchProgramService_fetchDevelopmentAreas,
      callback);
};


/**
 * @param {!proto.ai.nworx.api.proto.program.FetchProgramRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ai.nworx.api.proto.common.ResponseProto>}
 *     Promise that resolves to the response
 */
proto.ai.nworx.api.proto.program.FetchProgramServicePromiseClient.prototype.fetchDevelopmentAreas =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ai.nworx.api.proto.program.FetchProgramService/fetchDevelopmentAreas',
      request,
      metadata || {},
      methodDescriptor_FetchProgramService_fetchDevelopmentAreas);
};


/**
 * @const
 * @type {!grpc.web.MethodDescriptor<
 *   !proto.ai.nworx.api.proto.program.FetchAlignQuestionRequest,
 *   !proto.ai.nworx.api.proto.common.ResponseProto>}
 */
const methodDescriptor_FetchProgramService_fetchAlignQuestions = new grpc.web.MethodDescriptor(
  '/ai.nworx.api.proto.program.FetchProgramService/fetchAlignQuestions',
  grpc.web.MethodType.UNARY,
  proto.ai.nworx.api.proto.program.FetchAlignQuestionRequest,
  common_common_pb.ResponseProto,
  /**
   * @param {!proto.ai.nworx.api.proto.program.FetchAlignQuestionRequest} request
   * @return {!Uint8Array}
   */
  function(request) {
    return request.serializeBinary();
  },
  common_common_pb.ResponseProto.deserializeBinary
);


/**
 * @param {!proto.ai.nworx.api.proto.program.FetchAlignQuestionRequest} request The
 *     request proto
 * @param {?Object<string, string>} metadata User defined
 *     call metadata
 * @param {function(?grpc.web.RpcError, ?proto.ai.nworx.api.proto.common.ResponseProto)}
 *     callback The callback function(error, response)
 * @return {!grpc.web.ClientReadableStream<!proto.ai.nworx.api.proto.common.ResponseProto>|undefined}
 *     The XHR Node Readable Stream
 */
proto.ai.nworx.api.proto.program.FetchProgramServiceClient.prototype.fetchAlignQuestions =
    function(request, metadata, callback) {
  return this.client_.rpcCall(this.hostname_ +
      '/ai.nworx.api.proto.program.FetchProgramService/fetchAlignQuestions',
      request,
      metadata || {},
      methodDescriptor_FetchProgramService_fetchAlignQuestions,
      callback);
};


/**
 * @param {!proto.ai.nworx.api.proto.program.FetchAlignQuestionRequest} request The
 *     request proto
 * @param {?Object<string, string>=} metadata User defined
 *     call metadata
 * @return {!Promise<!proto.ai.nworx.api.proto.common.ResponseProto>}
 *     Promise that resolves to the response
 */
proto.ai.nworx.api.proto.program.FetchProgramServicePromiseClient.prototype.fetchAlignQuestions =
    function(request, metadata) {
  return this.client_.unaryCall(this.hostname_ +
      '/ai.nworx.api.proto.program.FetchProgramService/fetchAlignQuestions',
      request,
      metadata || {},
      methodDescriptor_FetchProgramService_fetchAlignQuestions);
};


module.exports = proto.ai.nworx.api.proto.program;

